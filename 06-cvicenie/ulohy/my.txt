
> ulohy@1.0.0 start C:\Users\6430u\Desktop\2020ZS\VAVJS\wawjs\06-cvicenie\ulohy
> node src/sonar-rules-cli.js

[
  {
    "key": "javascript:S1940",
    "repo": "javascript",
    "name": "Boolean checks should not be inverted",
    "createdAt": "2018-10-09T13:44:53+0200",
    "htmlDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!(a === 2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a !== 2) { ... }\n</pre>",
    "mdDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!(a === 2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a !== 2) { ... }\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1264",
    "repo": "javascript",
    "name": "A \"while\" loop should be used instead of a \"for\" loop",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
    "mdDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1479",
    "repo": "javascript",
    "name": "\"switch\" statements should not have too many \"case\" clauses",
    "createdAt": "2018-10-09T13:44:53+0200",
    "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>",
    "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximum",
        "htmlDesc": "Maximum number of &quot;case&quot;.",
        "defaultValue": "30",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1125",
    "repo": "javascript",
    "name": "Boolean literals should not be used in comparisons",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>\n<p>This rule also reports on redundant boolean operations.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet someValue = \"0\";\n// ...\n\nif (someValue == true) { /* ... */ }\nif (someBooleanValue != true) { /* ... */ }\ndoSomething(!false);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (someValue &amp;&amp; someValue != \"0\") { /* ... */ }\nif (!someBooleanValue) { /* ... */ }\ndoSomething(true);\n</pre>",
    "mdDesc": "<p>Boolean literals should be avoided in comparison expressions <code>==</code> and <code>!=</code> to improve code readability.</p>\n<p>This rule also reports on redundant boolean operations.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet someValue = \"0\";\n// ...\n\nif (someValue == true) { /* ... */ }\nif (someBooleanValue != true) { /* ... */ }\ndoSomething(!false);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (someValue &amp;&amp; someValue != \"0\") { /* ... */ }\nif (!someBooleanValue) { /* ... */ }\ndoSomething(true);\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1126",
    "repo": "javascript",
    "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>\n<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper\nconversion.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>\n<p>or </p>\n<pre>\nreturn !!expression;\n</pre>",
    "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified. </p>\n<p>Note that if the result of the expression is not a boolean but for instance an integer, then double negation should be used for proper\nconversion.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {\n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression;\n</pre>\n<p>or </p>\n<pre>\nreturn !!expression;\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1488",
    "repo": "javascript",
    "name": "Local variables should not be declared and then immediately returned or thrown",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n</pre>",
    "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  var duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3358",
    "repo": "javascript",
    "name": "Ternary operators should not be nested",
    "createdAt": "2017-02-08T00:48:08+0100",
    "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getTitle(p) {\n  return p.gender == \"male\" ? \"Mr. \" : p.isMarried() ? \"Mrs. \" : \"Miss \";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getTitle(p) {\n  if (p.gender == \"male\") {\n    return \"Mr. \";\n  }\n  return p.isMarried() ? \"Mrs. \" : \"Miss \";\n}\n</pre>",
    "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getTitle(p) {\n  return p.gender == \"male\" ? \"Mr. \" : p.isMarried() ? \"Mrs. \" : \"Miss \";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getTitle(p) {\n  if (p.gender == \"male\") {\n    return \"Mr. \";\n  }\n  return p.isMarried() ? \"Mrs. \" : \"Miss \";\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1854",
    "repo": "javascript",
    "name": "Dead stores should be removed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, <code>\"\"</code>,\n<code>[]</code> and <code>{}</code>. </p>\n<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>\n<pre>\nlet {a, b, ...rest} = obj; // 'a' and 'b' are ok\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
    "mdDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>undefined</code>, <code>true</code>, <code>false</code>, <code>\"\"</code>,\n<code>[]</code> and <code>{}</code>. </p>\n<p>This rule also ignores variables declared with object destructuring using rest syntax (used to exclude some properties from object):</p>\n<pre>\nlet {a, b, ...rest} = obj; // 'a' and 'b' are ok\ndoSomething(rest);\n\nlet [x1, x2, x3] = arr;    // but 'x1' is noncompliant, as omitting syntax can be used: \"let [, x2, x3] = arr;\"\ndoSomething(x2, x3);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1862",
    "repo": "javascript",
    "name": "Related \"if/else if\" statements and \"cases\" in a \"switch\" should not have the same condition",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will\nbe executed: the first one with a condition that evaluates to <code>true</code>.</p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.</p>\n<p>For a <code>switch</code>, if the first case ends with a <code>break</code>, the second case will never be executed, rendering it dead code. Worse\nthere is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.</p>\n<p>On the other hand, if the first case does not end with a <code>break</code>, both cases will be executed, but future maintainers may not notice\nthat.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "pitfall",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3923",
    "repo": "javascript",
    "name": "All branches in a conditional structure should not have exactly the same implementation",
    "createdAt": "2017-05-02T18:46:25+0200",
    "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>",
    "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all. Note that this rule does not\napply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code> clauses.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing();\n}\n\nlet a = (b == 0) ? getValue() : getValue();   // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3699",
    "repo": "javascript",
    "name": "The output of functions that don't return anything should not be used",
    "createdAt": "2016-10-15T04:37:31+0200",
    "htmlDesc": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\na = foo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nfoo();\n</pre>",
    "mdDesc": "<p>If a function does not return anything, it makes no sense to use its output. Specifically, passing it to another function, or assigning its\n\"result\" to a variable is probably a bug because such functions return <code>undefined</code>, which is probably not what was intended.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\na = foo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  console.log(\"Hello, World!\");\n}\n\nfoo();\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:NestedIfDepth",
    "repo": "javascript",
    "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>",
    "mdDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(let i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximumNestingLevel",
        "htmlDesc": "Maximum allowed &quot;if/for/while/switch/try&quot; statements nesting depth",
        "defaultValue": "3",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S930",
    "repo": "javascript",
    "name": "Function calls should not pass extra arguments",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); // Noncompliant; last argument is not used\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/628.html\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LoAg\">CERT, DCL07-C.</a> - Include the appropriate type information in function\n  declarators </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VQBc\">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments\n  </li>\n</ul>",
    "mdDesc": "<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function\nexecution.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + \" \" + b);\n}\n\nsay(\"hello\", \"world\", \"!\"); // Noncompliant; last argument is not used\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 16.6 - The number of arguments passed to a function shall match the number of parameters. </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/628.html\">MITRE, CWE-628</a> - Function Call with Incorrectly Specified Arguments </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/LoAg\">CERT, DCL07-C.</a> - Include the appropriate type information in function\n  declarators </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VQBc\">CERT, EXP37-C.</a> - Call functions with the correct number and type of arguments\n  </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S1301",
    "repo": "javascript",
    "name": "\"switch\" statements should have at least 3 \"case\" clauses",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
    "mdDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause. </li>\n  <li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause. </li>\n  <li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:CollapsibleIfStatements",
    "repo": "javascript",
    "name": "Collapsible \"if\" statements should be merged",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != undefined) {\n  if (y === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x != undefined &amp;&amp; y === 2) {\n  // ...\n}\n</pre>",
    "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != undefined) {\n  if (y === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x != undefined &amp;&amp; y === 2) {\n  // ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3812",
    "repo": "javascript",
    "name": "Results of \"in\" and \"instanceof\" should be negated rather than operands",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Mixing up the order of operations will almost always yield unexpected results.</p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key\nin dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the\nresult. <code>!obj instanceof SomeClass</code> has the same problem.</p>\n<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!\"prop\" in myObj) {  // Noncompliant;  \"in\" operator is checking property \"false\"\n  doTheThing();  // this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  // Noncompliant; \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  // this block is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n</pre>",
    "mdDesc": "<p>Mixing up the order of operations will almost always yield unexpected results.</p>\n<p>Similarly, mis-applied negation will also yield bad results. For instance consider the difference between <code>!key in dict</code> and <code>!(key\nin dict)</code>. The first looks for a boolean value (<code>!key</code>) in <code>dict</code>, and the other looks for a string and inverts the\nresult. <code>!obj instanceof SomeClass</code> has the same problem.</p>\n<p>This rule raises an issue when the left operand of an <code>in</code> or <code>instanceof</code> operator is negated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (!\"prop\" in myObj) {  // Noncompliant;  \"in\" operator is checking property \"false\"\n  doTheThing();  // this block will be never executed\n}\n\nif (!foo instanceof MyClass) {  // Noncompliant; \"!foo\" returns a boolean, which is not an instance of anything\n  doTheOtherThing();  // this block is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!(\"prop\" in myObj)) {\n  doTheThing();\n}\n\nif (!(foo instanceof MyClass)) {\n  doTheOtherThing();\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S1192",
    "repo": "javascript",
    "name": "String literals should not be duplicated",
    "createdAt": "2018-10-09T13:44:53+0200",
    "htmlDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\\w*$/</code>.\nString literals inside import/export statements and JSX attributes are also ignored.</p>",
    "mdDesc": "<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 10 characters are excluded as well as literals matching <code>/^\\w*$/</code>.\nString literals inside import/export statements and JSX attributes are also ignored.</p>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "design"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "threshold",
        "htmlDesc": "Number of times a literal must be duplicated to trigger an issue.",
        "defaultValue": "3",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "2min",
    "defaultDebtRemFnOffset": "2min",
    "effortToFixDescription": "per duplicate instance",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "2min",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "2min",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "2min",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "gapDescription": "per duplicate instance",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1764",
    "repo": "javascript",
    "name": "Identical expressions should not be used on both sides of a binary operator",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too\n  doX();\n}\nif (a &gt; a) { // always false\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>\n<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>\n<pre>\nif (f !== f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href='/sonar/coding_rules#rule_key=javascript%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>",
    "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a == b &amp;&amp; a == b) { // if the first one is true, the second one is too\n  doX();\n}\nif (a &gt; a) { // always false\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </p>\n<p>Moreover comma operator <code>,</code> and <code>instanceof</code> operator are ignored as there are use-cases when there usage is valid.</p>\n<pre>\nif (f !== f) { // test for NaN value\n  console.log(\"f is NaN\");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2737",
    "repo": "javascript",
    "name": "\"catch\" clauses should do more than rethrow",
    "createdAt": "2018-10-09T13:44:53+0200",
    "htmlDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  doSomething();\n} catch (ex) {  // Noncompliant\n  throw ex;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  doSomething();\n} catch (ex) {\n  console.err(ex);\n  throw ex;\n}\n</pre>\n<p>or</p>\n<pre>\ndoSomething();\n</pre>",
    "mdDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  doSomething();\n} catch (ex) {  // Noncompliant\n  throw ex;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  doSomething();\n} catch (ex) {\n  console.err(ex);\n  throw ex;\n}\n</pre>\n<p>or</p>\n<pre>\ndoSomething();\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy",
      "finding",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2428",
    "repo": "javascript",
    "name": "Object literal syntax should be used",
    "createdAt": "2018-10-09T13:44:53+0200",
    "htmlDesc": "<p>Object literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating\nan empty object, and then giving it properties one by one.</p>\n<p>An issue is raised when the following pattern is met:</p>\n<ul>\n  <li> An empty object is created. </li>\n  <li> A consecutive single-line statement adds a property to the created object. </li>\n</ul>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet person = {};  // Noncompliant\nperson.firstName = \"John\";\nperson.middleInitial = \"Q\";\nperson.lastName = \"Public\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet person = {\n  firstName: \"John\",\n  middleInitial: \"Q\",\n  lastName: \"Public\",\n}\n</pre>",
    "mdDesc": "<p>Object literal syntax, which initializes an object's properties inside the object declaration is cleaner and clearer than the alternative: creating\nan empty object, and then giving it properties one by one.</p>\n<p>An issue is raised when the following pattern is met:</p>\n<ul>\n  <li> An empty object is created. </li>\n  <li> A consecutive single-line statement adds a property to the created object. </li>\n</ul>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet person = {};  // Noncompliant\nperson.firstName = \"John\";\nperson.middleInitial = \"Q\";\nperson.lastName = \"Public\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet person = {\n  firstName: \"John\",\n  middleInitial: \"Q\",\n  lastName: \"Public\",\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S4144",
    "repo": "javascript",
    "name": "Functions should not have identical implementations",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions with fewer than 3 lines are ignored.</p>",
    "mdDesc": "<p>When two functions have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but\nmay be confusing to maintainers. In the latter case, the code should be refactored.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {  // Noncompliant\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction calculateCode() {\n  doTheThing();\n  doOtherThing();\n  return code;\n}\n\nfunction getName() {\n  return calculateCode();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Functions with fewer than 3 lines are ignored.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing",
      "duplicate",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S4143",
    "repo": "javascript",
    "name": "Collection elements should not be replaced unconditionally",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n fruits[1] = \"banana\";\n fruits[1] = \"apple\";  // Noncompliant - value on index 1 is overwritten\n\n myMap.set(\"key\", 1);\n myMap.set(\"key\", 2); // Noncompliant - value for key \"key\" is replaced\n\n mySet.add(1);\n mySet.add(1); // Noncompliant - element is already in the set\n</pre>",
    "mdDesc": "<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely in error.</p>\n<p><em>Note that this rule requires Node.js to be available during analysis.</em></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n fruits[1] = \"banana\";\n fruits[1] = \"apple\";  // Noncompliant - value on index 1 is overwritten\n\n myMap.set(\"key\", 1);\n myMap.set(\"key\", 2); // Noncompliant - value for key \"key\" is replaced\n\n mySet.add(1);\n mySet.add(1); // Noncompliant - element is already in the set\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2589",
    "repo": "javascript",
    "name": "Boolean expressions should not be gratuitous",
    "createdAt": "2017-05-02T18:46:25+0200",
    "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "redundant"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3798",
    "repo": "javascript",
    "name": "Variables and functions should not be declared in the global scope",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser\nenvironment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it\nshould be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).</p>\n<p>This rule should not be activated when modules are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myVar = 42;       // Noncompliant\nfunction myFunc() { } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwindow.myVar = 42;\nwindow.myFunc = function() { };\n</pre>\n<p>or</p>\n<pre>\nlet myVar = 42;\nlet myFunc = function() { }\n</pre>\n<p>or </p>\n<pre>\n// IIFE\n(function() {\n  var myVar = 42;\n  function myFunc() { }\n})();\n</pre>",
    "mdDesc": "<p>Any variable or function declared in the global scope implicitly becomes attached to the global object (the <code>window</code> object in a browser\nenvironment). To make it explicit this variable or function should be a property of <code>window</code>. When it is meant to be used just locally, it\nshould be declared with the <code>const</code> or <code>let</code> keywords (since ECMAScript 2015) or within an Immediately-Invoked Function\nExpression (IIFE).</p>\n<p>This rule should not be activated when modules are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myVar = 42;       // Noncompliant\nfunction myFunc() { } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwindow.myVar = 42;\nwindow.myFunc = function() { };\n</pre>\n<p>or</p>\n<pre>\nlet myVar = 42;\nlet myFunc = function() { }\n</pre>\n<p>or </p>\n<pre>\n// IIFE\n(function() {\n  var myVar = 42;\n  function myFunc() { }\n})();\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:MissingNewlineAtEndOfFile",
    "repo": "javascript",
    "name": "Files should contain an empty newline at the end",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
    "mdDesc": "<p>Some tools work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1134",
    "repo": "javascript",
    "name": "Track uses of \"FIXME\" tags",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
    "mdDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "debtOverloaded": false,
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1135",
    "repo": "javascript",
    "name": "Track uses of \"TODO\" tags",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
    "mdDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
    "severity": "INFO",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "debtOverloaded": false,
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3796",
    "repo": "javascript",
    "name": "Callbacks of array methods should have return statements",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.</p>\n<p>This rule applies for the following methods of an array:</p>\n<ul>\n  <li> <code>Array.from</code> </li>\n  <li> <code>Array.prototype.every</code> </li>\n  <li> <code>Array.prototype.filter</code> </li>\n  <li> <code>Array.prototype.find</code> </li>\n  <li> <code>Array.prototype.findIndex</code> </li>\n  <li> <code>Array.prototype.map</code> </li>\n  <li> <code>Array.prototype.reduce</code> </li>\n  <li> <code>Array.prototype.reduceRight</code> </li>\n  <li> <code>Array.prototype.some</code> </li>\n  <li> <code>Array.prototype.sort</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); // Noncompliant: No return statement\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n</pre>",
    "mdDesc": "<p>Arrays in JavaScript have several methods for filtering, mapping or folding that require a callback. Not having a return statement in such a\ncallback function is most likely a mistake.</p>\n<p>This rule applies for the following methods of an array:</p>\n<ul>\n  <li> <code>Array.from</code> </li>\n  <li> <code>Array.prototype.every</code> </li>\n  <li> <code>Array.prototype.filter</code> </li>\n  <li> <code>Array.prototype.find</code> </li>\n  <li> <code>Array.prototype.findIndex</code> </li>\n  <li> <code>Array.prototype.map</code> </li>\n  <li> <code>Array.prototype.reduce</code> </li>\n  <li> <code>Array.prototype.reduceRight</code> </li>\n  <li> <code>Array.prototype.some</code> </li>\n  <li> <code>Array.prototype.sort</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  a.concat(b);\n}); // Noncompliant: No return statement\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar merged = arr.reduce(function(a, b) {\n  return a.concat(b);\n});\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3799",
    "repo": "javascript",
    "name": "Destructuring patterns should not be empty",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.</p>\n<p>This rule raises an issue when empty destructuring pattern is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar {a: {}, b} = myObj; // Noncompliant\nfunction foo({first: [], second}) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  // ...\n}\n</pre>",
    "mdDesc": "<p>Destructuring is a convenient way of extracting multiple values from data stored in (possibly nested) objects and arrays. However, it is possible\nto create an empty pattern that has no effect. When empty curly braces or brackets are used to the right of a property name most of the time the\nintent was to use a default value instead.</p>\n<p>This rule raises an issue when empty destructuring pattern is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar {a: {}, b} = myObj; // Noncompliant\nfunction foo({first: [], second}) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar {a = {}, b} = myObj;\nfunction foo({first = [], second}) {\n  // ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:BoundOrAssignedEvalOrArguments",
    "repo": "javascript",
    "name": "\"eval\" and \"arguments\" should not be bound or assigned",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words.</p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/sonar/coding_rules#rule_key=javascript%3AS2137'>S2137</a> instead.</p>",
    "mdDesc": "<p><code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed\nproperties. As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the\noriginal definitions of those two reserved words.</p>\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2137} instead.</p>",
    "severity": "MAJOR",
    "status": "DEPRECATED",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:ConditionalComment",
    "repo": "javascript",
    "name": "Internet Explorer's conditional comments should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a\ncomment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to\nInternet Explorer and won't work for other browsers.</p>\n<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks\nand libraries.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version &gt;= 5.5)\n    document.write(\"You are using IE5.5 or newer\");\n  @else\n    document.write(\"You are using IE5 or older\");\n  @end\n  @*/\n</pre>",
    "mdDesc": "<p>Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a\ncomment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to\nInternet Explorer and won't work for other browsers.</p>\n<p>Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks\nand libraries.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version &gt;= 5.5)\n    document.write(\"You are using IE5.5 or newer\");\n  @else\n    document.write(\"You are using IE5 or older\");\n  @end\n  @*/\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cross-browser"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2583",
    "repo": "javascript",
    "name": "Conditionally executed blocks should be reachable",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "pitfall",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:VariableDeclarationAfterUsage",
    "repo": "javascript",
    "name": "Variables should be declared before they are used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they \"float\" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to\na minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts \"undefined\" instead of \"1\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print \"1\"\n</pre>",
    "mdDesc": "<p>Variables declared with <code>var</code> have the special property that regardless of where they're declared in a function they \"float\" to the top\nof the function and are available for use even before they're declared. That makes scoping confusing, especially for new coders. To keep confusion to\na minimum, <code>var</code> declarations should happen before the variables they declare are used for the first time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts \"undefined\" instead of \"1\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print \"1\"\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:Parentheses",
    "repo": "javascript",
    "name": "Redundant pairs of parentheses should be removed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
    "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = (y / 2 + 1);   //Compliant even if those parenthesis are useless for the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2228",
    "repo": "javascript",
    "name": "Console logging should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "mdDesc": "<p>Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you\nrun the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "owasp-a3",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S3317",
    "repo": "javascript",
    "name": "Default export names and file names should match",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>",
    "mdDesc": "<p>By convention, a file that exports only one class, function, or constant should be named for that class, function or constant. Anything else may\nconfuse maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing",
      "convention",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1145",
    "repo": "javascript",
    "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/sonar/coding_rules#rule_key=javascript%3AS2583'>S2583</a> instead.</p>",
    "mdDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted. </li>\n  <li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2583} instead.</p>",
    "severity": "MAJOR",
    "status": "DEPRECATED",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2234",
    "repo": "javascript",
    "name": "Parameters should be passed in the correct order",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,\nwhen the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will\nlikely lead to unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(divisor, dividend);\n  //...\n}\n</pre>",
    "mdDesc": "<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However,\nwhen the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will\nlikely lead to unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction divide(divisor, dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(divisor, dividend);\n  //...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3686",
    "repo": "javascript",
    "name": "Functions should not be called both with and without \"new\"",
    "createdAt": "2016-09-02T20:13:38+0200",
    "htmlDesc": "<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object\n</pre>",
    "mdDesc": "<p>Constructor functions, which create new object instances, must only be called with <code>new</code>. Non-constructor functions must not. Mixing\nthese two usages could lead to unexpected results at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getNum() {\n  return 5;\n}\n\nfunction Num(numeric, alphabetic) {\n  this.numeric = numeric;\n  this.alphabetic = alphabetic;\n}\n\nvar myFirstNum = getNum();\nvar my2ndNum = new getNum();  // Noncompliant. An empty object is returned, NOT 5\n\nvar myNumObj1 = new Num();\nvar myNumObj2 = Num();  // Noncompliant. undefined is returned, NOT an object\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:DuplicatePropertyName",
    "repo": "javascript",
    "name": "Property names should not be duplicated within a class or object literal",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.</p>\n<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  'key': \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n</pre>",
    "mdDesc": "<p>JavaScript allows duplicate property names in classes and object literals, but only the last instance of a duplicated name determines the actual\nvalue that will be used for it. Therefore, changing values of other occurrences of a duplicated name will have no effect and may cause\nmisunderstandings and bugs.</p>\n<p>Defining a <code>class</code> with a duplicated <code>constructor</code> will generate an error.</p>\n<p>Before ECMAScript 2015, using duplicate names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key\": \"value\", // Noncompliant - duplicate of \"key\"\n  'key': \"value\", // Noncompliant - duplicate of \"key\"\n  key: \"value\", // Noncompliant - duplicate of \"key\"\n  \\u006bey: \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\u006bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  \"\\x6bey\": \"value\", // Noncompliant - duplicate of \"key\"\n  1: \"value\" // Noncompliant - duplicate of \"1\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  \"key\": \"value\",\n  \"1\": \"value\",\n  \"key2\": \"value\",\n  'key3': \"value\",\n  key4: \"value\",\n  \\u006bey5: \"value\",\n  \"\\u006bey6\": \"value\",\n  \"\\x6bey7\": \"value\",\n  1b: \"value\"\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S1143",
    "repo": "javascript",
    "name": "Jump statements should not occur in \"finally\" blocks",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar\nstatements from the suspended <code>try</code> and <code>catch</code> blocks.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force\ncontrol flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    } finally {\n        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
    "mdDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and <code>continue</code> from a <code>finally</code> block overwrites similar\nstatements from the suspended <code>try</code> and <code>catch</code> blocks.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) would force\ncontrol flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    } finally {\n        return 3; // Noncompliant: 3 is returned before 1, or 2, which we did not expect\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    try {\n        return 1; // We expect 1 to be returned\n    } catch(err) {\n        return 2; // Or 2 in cases of error\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "error-handling"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S881",
    "repo": "javascript",
    "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
    "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions. </li>\n  <li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression. </li>\n  <li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression. </li>\n  <li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit </li>\n  <li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects\n  other than that cause by the increment or decrement operator </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side\n  effects </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the\n  same object within an expression </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2688",
    "repo": "javascript",
    "name": "\"NaN\" should not be used in comparisons",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log(\"a is not a number\");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log(\"a is not NaN\"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7AEqAQ\">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>",
    "mdDesc": "<p><code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results,\nbut probably not the ones you want. </p>\n<p>Instead, the best way to see whether a variable is equal to <code>NaN</code> is to use <code>Number.isNaN()</code>, since ES2015, or (perhaps\ncounter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log(\"a is not a number\");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log(\"a is not NaN\"); // this statement is not necessarily true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (Number.isNaN(a)) {\n  console.log(\"a is not a number\");\n}\nif (!Number.isNaN(a)) {\n  console.log(\"a is not NaN\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7AEqAQ\">CERT, NUM07-J.</a> - Do not attempt comparisons with NaN </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3776",
    "repo": "javascript",
    "name": "Cognitive Complexity of functions should not be too high",
    "createdAt": "2017-02-08T00:48:09+0100",
    "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
    "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a function is to understand. Functions with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "threshold",
        "htmlDesc": "The maximum authorized complexity.",
        "defaultValue": "15",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "1min",
    "defaultDebtRemFnOffset": "5min",
    "effortToFixDescription": "per complexity point over the threshold",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "1min",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "1min",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "1min",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "gapDescription": "per complexity point over the threshold",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S878",
    "repo": "javascript",
    "name": "Comma operator should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a += 2, a + b;  // What's the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.10 - The comma operator shall not be used. </li>\n  <li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used. </li>\n  <li> MISRA C:2012, 12.3 - The comma operator should not be used </li>\n</ul>",
    "mdDesc": "<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is\ngenerally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a += 2, a + b;  // What's the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.10 - The comma operator shall not be used. </li>\n  <li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used. </li>\n  <li> MISRA C:2012, 12.3 - The comma operator should not be used </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2201",
    "repo": "javascript",
    "name": "Return values from functions without side effects should not be ignored",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n'hello'.lastIndexOf('e'); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
    "mdDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on a predefined list of known objects &amp; functions. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n'hello'.lastIndexOf('e'); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet char = 'hello'.lastIndexOf('e');\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2685",
    "repo": "javascript",
    "name": "\"arguments.caller\" and \"arguments.callee\" should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest\nversions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>\n  Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \"callee\" which throw a TypeError\n  exception on access.\n</blockquote>\n<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log('I was called from the global scope.');\n   else\n      console.log(arguments.caller + ' called me!');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>",
    "mdDesc": "<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest\nversions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>\n  Arguments objects for strict mode functions define non-configurable accessor properties named \"caller\" and \"callee\" which throw a TypeError\n  exception on access.\n</blockquote>\n<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log('I was called from the global scope.');\n   else\n      console.log(arguments.caller + ' called me!');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "obsolete"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3531",
    "repo": "javascript",
    "name": "Generators should \"yield\" something",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction* myGen(a, b) {  // Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n</pre>",
    "mdDesc": "<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code\nwill always be empty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction* myGen(a, b) {  // Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "api-design",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3533",
    "repo": "javascript",
    "name": "\"import\" should be used to include external code",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be\nconverted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// circle.js\nexports.area = function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine([\"./cart\", \"./horse\"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle = require('./circle.js');  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// circle.js\nlet area = function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from \"./cart.js\";\nimport horse from \"./horse.js\";\n\n// bar.js\nimport circle from \"./circle.js\"\n</pre>",
    "mdDesc": "<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately,\nES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be\nconverted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// circle.js\nexports.area = function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine([\"./cart\", \"./horse\"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle = require('./circle.js');  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// circle.js\nlet area = function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from \"./cart.js\";\nimport horse from \"./horse.js\";\n\n// bar.js\nimport circle from \"./circle.js\"\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention",
      "es2015",
      "obsolete"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1119",
    "repo": "javascript",
    "name": "Labels should not be used",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Labeled loops are ignored.</p>",
    "mdDesc": "<p>Labels are not commonly used, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to follow,\nwhich reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel: {\n  let x = doSomething();\n  if (x &gt; 0) {\n    break myLabel;\n  }\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = doSomething();\nif (x &lt;= 0) {\n  doSomethingElse();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Labeled loops are ignored.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1472",
    "repo": "javascript",
    "name": "Function call arguments should not start on new lines",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial intent of the developer?</p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? </li>\n  <li> Pass the second function as a parameter to the first one ? </li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.</p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>",
    "mdDesc": "<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could\nlead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial intent of the developer?</p>\n<ol>\n  <li> Define a function and then execute some unrelated code inside a closure ? </li>\n  <li> Pass the second function as a parameter to the first one ? </li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter.</p>\n<p>By extension, and to improve readability, any kind of function call argument should not start on new line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2208",
    "repo": "javascript",
    "name": "Wildcard imports should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using\n<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from \"module\";</code>\nimports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport * as Imported from \"aModule\";  // Noncompliant\n</pre>",
    "mdDesc": "<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using\n<code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from \"module\";</code>\nimports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport * as Imported from \"aModule\";  // Noncompliant\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015",
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2681",
    "repo": "javascript",
    "name": "Multiline blocks should be enclosed in curly braces",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
    "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the\nomission of curly braces means the lines will be unconditionally executed once.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:AssignmentWithinCondition",
    "repo": "javascript",
    "name": "Assignments should not be made from within sub-expressions",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str != '') {\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>",
    "mdDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)) != '') {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str != '') {\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value </li>\n  <li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions </li>\n  <li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n  </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:DuplicateFunctionArgument",
    "repo": "javascript",
    "name": "Function argument names should be unique",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).</p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>",
    "mdDesc": "<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument\nhides all the previous arguments with the same name (those previous arguments remain available through arguments[i], so they're not completely\ninaccessible).</p>\n<p>This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. Furthermore, in strict mode, declaring\narguments with the same name produces an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:ForIn",
    "repo": "javascript",
    "name": "\"for...in\" loops should filter properties before acting on them",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that don't take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loops used to clone objects are ignored.</p>\n<pre>\nfor (prop in obj) {\n  a[prop] = obj[prop];  // Compliant by exception\n}\n</pre>",
    "mdDesc": "<p>The <code>for...in</code> statement allows you to loop through the names of all of the properties of an object. The list of properties includes all\nthose properties that were inherited through the prototype chain. This has the side effect of serving up functions when the interest is in data\nproperties. Programs that don't take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are\nacted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Loops used to clone objects are ignored.</p>\n<pre>\nfor (prop in obj) {\n  a[prop] = obj[prop];  // Compliant by exception\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S1116",
    "repo": "javascript",
    "name": "Extra semicolons should be removed",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n  <li> There was a misunderstanding about where semicolons are required or useful. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;; // Noncompliant\n\nfunction foo() {\n};  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction foo() {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>",
    "mdDesc": "<p>Extra semicolons (<code>;</code>) are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n  <li> There was a misunderstanding about where semicolons are required or useful. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 1;; // Noncompliant\n\nfunction foo() {\n};  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 1;\n\nfunction foo() {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that\n  the first character following the null statement is a white-space character. </li>\n  <li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided\n  that the first character following the null statement is a white-space character. </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for,\n  or while condition </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for,\n  or while statement </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3785",
    "repo": "javascript",
    "name": "\"in\" should not be used with primitive types",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = \"Foo\";\n\"length\" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = new String(\"Foo\");\n\"length\" in x;    // true\n0 in x;           // true\n\"foobar\" in x;    // false\n</pre>",
    "mdDesc": "<p>The <code>in</code> operator tests whether the specified property is in the specified object.</p>\n<p>If the right operand is a of primitive type (i.e., not an object) the <code>in</code> operator raises a <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = \"Foo\";\n\"length\" in x; // Noncompliant: TypeError\n0 in x;        // Noncompliant: TypeError\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = new String(\"Foo\");\n\"length\" in x;    // true\n0 in x;           // true\n\"foobar\" in x;    // false\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2692",
    "repo": "javascript",
    "name": "\"indexOf\" checks should not be for positive numbers",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for\nvalues &gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the string, consider using\n<code>includes</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf(\"ish\") &gt; 0 { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") &gt;= 0) {\n  // ...\n}\nif (arr[0].includes(\"ish\")) {\n  // ...\n}\n</pre>",
    "mdDesc": "<p>Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for\nvalues &gt;0 ignore the first element, which is likely a bug. If you're merely checking the presence of the string, consider using\n<code>includes</code> instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf(\"ish\") &gt; 0 { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar color = \"blue\";\nvar name = \"ishmael\";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf(\"blue\") &gt;= 0) {\n  // ...\n}\nif (arr[0].includes(\"ish\")) {\n  // ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3782",
    "repo": "javascript",
    "name": "Arguments to built-in functions should match documented types",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n</pre>",
    "mdDesc": "<p>The types of the arguments to built-in functions are specified in the JavaScript language specifications. Calls to these functions should conform\nto the documented types, otherwise the result will most likely not be what was expected (e.g.: the call would always return <code>false</code>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst isTooSmall = Math.abs(x &lt; 0.0042);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst isTooSmall = Math.abs(x) &lt; 0.0042;\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3786",
    "repo": "javascript",
    "name": "Template literal placeholder syntax should not be used in regular strings",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(\"Today is ${date}\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconsole.log(`Today is ${date}`);\n</pre>",
    "mdDesc": "<p>Template strings allow developers to embed variables or expressions in strings using template literals, instead of string concatenation. This is\ndone by using expressions like <code>${variable} </code> in a string between two back-ticks (<code>`</code>). However, when used in a regular string\nliteral (between double or single quotes) the template will not be evaluated and will be used as a literal, which is probably not what was\nintended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(\"Today is ${date}\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconsole.log(`Today is ${date}`);\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:SingleQuote",
    "repo": "javascript",
    "name": "Single quotes should be used for string literals",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>For consistency single-quotes (') are preferred to double-quotes (\"). This is helpful when creating strings that include HTML. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = \"something\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = 'something';\n</pre>\n<h2>Exceptions</h2>\n<p>JSX code and strings that contain quotes are ignored.</p>\n<pre>\nlet heSaid = \"Then he said 'What?'.\"  // ignored\nlet sheSaid = '\"Whatever!\" she replied.'  // ignored\n</pre>",
    "mdDesc": "<p>For consistency single-quotes (') are preferred to double-quotes (\"). This is helpful when creating strings that include HTML. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = \"something\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = 'something';\n</pre>\n<h2>Exceptions</h2>\n<p>JSX code and strings that contain quotes are ignored.</p>\n<pre>\nlet heSaid = \"Then he said 'What?'.\"  // ignored\nlet sheSaid = '\"Whatever!\" she replied.'  // ignored\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:DebuggerStatement",
    "repo": "javascript",
    "name": "Debugger statements should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "mdDesc": "<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint\nin the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to\nattacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write(\"loop index is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "owasp-a3",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S1128",
    "repo": "javascript",
    "name": "Unnecessary imports should be removed",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>There's no reason to import modules you don't use; and every reason not to: doing so needlessly increases the load.</p>\n<p>Finally, importing a module twice is pointless and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\n\nconsole.log(\"My first JavaScript...\");\n\nimport { B1 } from 'b'; // Noncompliant, already imported\n\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\n\nconsole.log(\"My first JavaScript...\");\n\nconsole.log(B1);\n</pre>",
    "mdDesc": "<p>There's no reason to import modules you don't use; and every reason not to: doing so needlessly increases the load.</p>\n<p>Finally, importing a module twice is pointless and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport A from 'a';      // Noncompliant, A isn't used\nimport { B1 } from 'b';\n\nconsole.log(\"My first JavaScript...\");\n\nimport { B1 } from 'b'; // Noncompliant, already imported\n\nconsole.log(B1);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1 } from 'b';\n\nconsole.log(\"My first JavaScript...\");\n\nconsole.log(B1);\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:FunctionDeclarationsWithinBlocks",
    "repo": "javascript",
    "name": "Function declarations should not be made within blocks",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the\nimplementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or\nfunction. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function\nwithin a block :</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>",
    "mdDesc": "<p>While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the\nimplementations are inconsistent with each other. ECMAScript 5 and below only allow function declarations in the root statement list of a script or\nfunction. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function\nwithin a block :</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cross-browser",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:OctalNumber",
    "repo": "javascript",
    "name": "Octal values should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
    "mdDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used. </li>\n  <li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used </li>\n  <li> MISRA C:2012, 7.1 - Octal constants shall not be used </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a\n  decimal value </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra",
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3353",
    "repo": "javascript",
    "name": "Unchanged variables should be marked \"const\"",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that \"no this isn't updated,\nand it's not supposed to be\". <code>const</code> should be used in these situations in the interests of code clarity.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction seek(input) {\n  let target = 32;  // Noncompliant\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction seek(input) {\n  const target = 32;\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
    "mdDesc": "<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that \"no this isn't updated,\nand it's not supposed to be\". <code>const</code> should be used in these situations in the interests of code clarity.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction seek(input) {\n  let target = 32;  // Noncompliant\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction seek(input) {\n  const target = 32;\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:EmptyBlock",
    "repo": "javascript",
    "name": "Nested blocks of code should not be left empty",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",
    "mdDesc": "<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty. Moreover <code>catch</code> blocks are ignored.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:EqEqEq",
    "repo": "javascript",
    "name": "\"===\" and \"!==\" should be used instead of \"==\" and \"!=\"",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or\n<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not\n<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>",
    "mdDesc": "<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For\nexample, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or\n<code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not\n<code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:LabelPlacement",
    "repo": "javascript",
    "name": "Only \"while\", \"do\" and \"for\" statements should be labelled",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,\n<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n</pre>",
    "mdDesc": "<p>Any statement or block of statements can be identified by a label, but those labels should be used only on <code>while</code>,\n<code>do-while</code> and <code>for</code> statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print(\"12\");\n    break myLabel;\n  }\n  print(\"Odd number, but not 12\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print(\"Loop\");\n  break myLabel;\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:HtmlComments",
    "repo": "javascript",
    "name": "HTML-style comments should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>",
    "mdDesc": "<p>HTML-style comments are not part of EcmaScript specification, and should not be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2703",
    "repo": "javascript",
    "name": "Variables should be declared explicitly",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause\nof a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>\n<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    // ...\n  }\n}\n</pre>",
    "mdDesc": "<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the\n<em>accidental</em> creation of global variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause\nof a for-loop without using the <code>let</code>, <code>const</code> or <code>var</code> keywords. </p>\n<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    // ...\n  }\n}\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:PrimitiveWrappers",
    "repo": "javascript",
    "name": "Wrapper objects should not be used for primitive types",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = new Number(\"0\");\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = Number(\"0\");\nif (x) {\n  alert('hi');\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n</pre>",
    "mdDesc": "<p>The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. If you use a wrapper object constructor for type conversion,\njust remove the <code>new</code> keyword, and you'll get a primitive value automatically. If you use a wrapper object as a way to add properties to a\nprimitive, you should re-think the design. Such uses are considered bad practice, and should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet x = new Number(\"0\");\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet x = Number(\"0\");\nif (x) {\n  alert('hi');\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Cases when argument of primitive type constructor is a literal of the same type are ignored, except <code>new Boolean(false)</code>.</p>\n<pre>\nlet booleanObject = new Boolean(true);\nlet numberObject = new Number(0);\nlet stringObject = new String('');\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2819",
    "repo": "javascript",
    "name": "Cross-document messaging domains should be carefully restricted",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*</code>) in the\n  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n</blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
    "mdDesc": "<p>HTML5 adds the ability to send messages to documents served from other domains. According to the specification:</p>\n<blockquote>\n  Authors should not use the wildcard keyword (\n  <code>*</code>) in the\n  <code>targetOrigin</code> argument in messages that contain any confidential information, as otherwise there is no way to guarantee that the message\n  is only delivered to the recipient to which it was intended.\n</blockquote>\n<p>To mitigate the risk of sending sensitive information to a document served from a hostile or unknown domain, this rule raises an issue each time\n<code>Window.postMessage</code> is used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, \"*\"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "html5",
      "owasp-a7"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:ExcessiveParameterList",
    "repo": "javascript",
    "name": "Functions should not have too many parameters",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(param1, param2, param3, param4) {\n...\n}\n</pre>",
    "mdDesc": "<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(param1, param2, param3, param4) {\n...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximumFunctionParameters",
        "htmlDesc": "The maximum authorized number of parameters",
        "defaultValue": "7",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1067",
    "repo": "javascript",
    "name": "Expressions should not be too complex",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>",
    "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "max",
        "htmlDesc": "Maximum number of allowed conditional operators in an expression",
        "defaultValue": "3",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "1min",
    "defaultDebtRemFnOffset": "5min",
    "effortToFixDescription": "per complexity point above the threshold",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "1min",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "1min",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "1min",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "gapDescription": "per complexity point above the threshold",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3002",
    "repo": "javascript",
    "name": "Unary operators \"+\" and \"-\" should not be used with objects",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values. But not every value can be\nconverted to a <code>Number</code> type; use it with an object, and result will be <code>NaN</code> (Not A Number). This can be confusing to\nmaintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj);    // Noncompliant\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo);    // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj.x);\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo());\n\nvar str = '42';\ndoSomethingWithNumber(+str);\n</pre>\n<h2>Exceptions</h2>\n<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types, and <code>+</code> can be used with\n<code>Date</code>.</p>\n<pre>\nvar b = new Boolean(true);\ndoSomethingWithNumber(-b);  // Compliant\nvar timestamp = +new Date();  // Compliant\n</pre>",
    "mdDesc": "<p>The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values. But not every value can be\nconverted to a <code>Number</code> type; use it with an object, and result will be <code>NaN</code> (Not A Number). This can be confusing to\nmaintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj);    // Noncompliant\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo);    // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj.x);\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo());\n\nvar str = '42';\ndoSomethingWithNumber(+str);\n</pre>\n<h2>Exceptions</h2>\n<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types, and <code>+</code> can be used with\n<code>Date</code>.</p>\n<pre>\nvar b = new Boolean(true);\ndoSomethingWithNumber(-b);  // Compliant\nvar timestamp = +new Date();  // Compliant\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3003",
    "repo": "javascript",
    "name": "Comparison operators should not be used with strings",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert(\"There are more oranges\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (Number(appleNumber) &lt; Number(orangeNumber)) {\n  alert(\"There are more oranges\");\n}\n</pre>",
    "mdDesc": "<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield\nthe expected results. Make sure the intention was to compare strings and not numbers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert(\"There are more oranges\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar appleNumber = \"123\";\nvar orangeNumber = \"45\";\nif (Number(appleNumber) &lt; Number(orangeNumber)) {\n  alert(\"There are more oranges\");\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1186",
    "repo": "javascript",
    "name": "Functions should not be empty",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>",
    "mdDesc": "<p>There are several reasons for a function not to have a function body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an exception should be thrown in languages where that mechanism is available. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n}\n\nvar foo = () =&gt; {};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n    // This is intentional\n}\n\nvar foo = () =&gt; {\n    do_something();\n};\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2715",
    "repo": "javascript",
    "name": "\"find\" should be used to select the children of an element known by id",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the jQuery Sizzle\nengine for where it's really needed. That makes the query faster, and your application more responsive.</p>\n<p>From the jQuery documentation:</p>\n<blockquote>\n  <p>Beginning your selector with an ID is always best.</p>\n  <p>The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only\n  selections are handled using <code>document.getElementById()</code>, which is extremely fast because it is native to the browser.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $productIds = $(\"#products div.id\"); // Noncompliant - a nested query for Sizzle selector engine\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $productIds = $(\"#products\").find(\"div.id\"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine\n</pre>",
    "mdDesc": "<p>The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the jQuery Sizzle\nengine for where it's really needed. That makes the query faster, and your application more responsive.</p>\n<p>From the jQuery documentation:</p>\n<blockquote>\n  <p>Beginning your selector with an ID is always best.</p>\n  <p>The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only\n  selections are handled using <code>document.getElementById()</code>, which is extremely fast because it is native to the browser.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $productIds = $(\"#products div.id\"); // Noncompliant - a nested query for Sizzle selector engine\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $productIds = $(\"#products\").find(\"div.id\"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "performance",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3001",
    "repo": "javascript",
    "name": "\"delete\" should be used only with object properties",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x  = 1;\ndelete x;       // Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n</pre>",
    "mdDesc": "<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass\nanything else to it, and you may or may not get the desired result.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x  = 1;\ndelete x;       // Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:ConstructorFunctionsForSideEffects",
    "repo": "javascript",
    "name": "Objects should not be created to be dropped immediately without being used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>",
    "mdDesc": "<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could\nlead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate method and called\ndirectly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2716",
    "repo": "javascript",
    "name": "Universal selectors should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>,\nshould be limited; it explicitly specifies that the match could be anywhere.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( \".buttons &gt; *\" );  // Noncompliant; extremely expensive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$( \".buttons\" ).children(); // Compliant\n</pre>",
    "mdDesc": "<p>Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>,\nshould be limited; it explicitly specifies that the match could be anywhere.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( \".buttons &gt; *\" );  // Noncompliant; extremely expensive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n$( \".buttons\" ).children(); // Compliant\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "performance",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2713",
    "repo": "javascript",
    "name": "JQuery cache variables should comply with a convention name",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all variables names that are used to store/cache jQuery\nobjects match a provided regular expression.</p>",
    "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all variables names that are used to store/cache jQuery\nobjects match a provided regular expression.</p>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention",
      "jquery"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "format",
        "htmlDesc": "Regular expression used to check the variable names against",
        "defaultValue": "^\\$[a-z][a-zA-Z0-9]*$",
        "type": "STRING"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2714",
    "repo": "javascript",
    "name": "Element type selectors should not be used with class selectors",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Using element type in class selectors is slower than using only the class selector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $products = $(\"div.products\");    // Noncompliant - slow\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $products = $(\".products\");    // Compliant - fast\n</pre>",
    "mdDesc": "<p>Using element type in class selectors is slower than using only the class selector.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar $products = $(\"div.products\");    // Noncompliant - slow\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar $products = $(\".products\");    // Compliant - fast\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "performance",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3800",
    "repo": "javascript",
    "name": "Functions should always return the same type",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  if (a === 1) {\n    return true;\n  }\n  return 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a === 1) {\n    return true;\n  }\n  return false;\n}\n</pre>",
    "mdDesc": "<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  if (a === 1) {\n    return true;\n  }\n  return 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a === 1) {\n    return true;\n  }\n  return false;\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3801",
    "repo": "javascript",
    "name": "Functions should use \"return\" consistently",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>\n<ul>\n  <li> It exits without a <code>return</code> statement. </li>\n  <li> It executes a <code>return</code> with no value. </li>\n</ul>\n<p>This rule verifies that return values are either always or never specified for each path through a function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) { // Noncompliant, function exits without \"return\"\n  if (a == 1) {\n    return true;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a == 1) {\n    return true;\n  }\n  return false;\n}\n</pre>",
    "mdDesc": "<p>Unlike strongly typed languages, JavaScript does not enforce a return type on a function. This means that different paths through a function can\nreturn different types of values, which can be very confusing to the user and significantly harder to maintain.</p>\n<p>In particular a function, in JavaScript, will return <code>undefined</code> in any of the following cases:</p>\n<ul>\n  <li> It exits without a <code>return</code> statement. </li>\n  <li> It executes a <code>return</code> with no value. </li>\n</ul>\n<p>This rule verifies that return values are either always or never specified for each path through a function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) { // Noncompliant, function exits without \"return\"\n  if (a == 1) {\n    return true;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  if (a == 1) {\n    return true;\n  }\n  return false;\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "api-design",
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:MultilineStringLiterals",
    "repo": "javascript",
    "name": "Multiline string literals should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>",
    "mdDesc": "<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the\nbeginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2392",
    "repo": "javascript",
    "name": "Variables should be defined in the blocks where they are used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are\ndeclared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) {\n  var i;  // Noncompliant; should be declared in if-block\n  if (a &gt; b) {\n    i = a;\n    console.log(i);\n    var x = a - b;  // Noncompliant; should be declared outside if-block\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a, b) {\n  var x = a - b;\n\n  if (a &gt; b) {\n    var i = a;\n    console.log(i);\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>",
    "mdDesc": "<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are\ndeclared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) {\n  var i;  // Noncompliant; should be declared in if-block\n  if (a &gt; b) {\n    i = a;\n    console.log(i);\n    var x = a - b;  // Noncompliant; should be declared outside if-block\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a, b) {\n  var x = a - b;\n\n  if (a &gt; b) {\n    var i = a;\n    console.log(i);\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:NamedFunctionExpression",
    "repo": "javascript",
    "name": "Named function expressions should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer\n8).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Noncompliant;  named function expression\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule. </p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>",
    "mdDesc": "<p>While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer\n8).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Noncompliant;  named function expression\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule. </p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cross-browser",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3579",
    "repo": "javascript",
    "name": "Array indexes should be numeric",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as\neasy as an array, and more reliable if you need named members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  // Noncompliant\narr[1] = 'foo';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n</pre>",
    "mdDesc": "<p>Associative arrays allow you to store values in an array with either numeric or named indexes. But creating and populating an object is just as\neasy as an array, and more reliable if you need named members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet arr = [];\narr[0] = 'a';\narr['name'] = 'bob';  // Noncompliant\narr[1] = 'foo';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj = {\n  name: 'bob',\n  arr: ['a', 'foo']\n};\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:FunctionComplexity",
    "repo": "javascript",
    "name": "Functions should not be too complex",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>",
    "mdDesc": "<p>The Cyclomatic Complexity of functions should not exceed a defined threshold. Complex code may perform poorly and can be difficult to test\nthoroughly.</p>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximumFunctionComplexityThreshold",
        "htmlDesc": "The maximum authorized complexity in function",
        "defaultValue": "10",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "1min",
    "defaultDebtRemFnOffset": "10min",
    "effortToFixDescription": "per complexity point above the threshold",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "1min",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "1min",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "1min",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "gapDescription": "per complexity point above the threshold",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1154",
    "repo": "javascript",
    "name": "Results of operations on strings should not be ignored",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar str = \"...\"\nstr.toUpperCase(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar str = \"...\"\nstr = str.toUpperCase();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/sonar/coding_rules#rule_key=javascript%3AS2201'>S2201</a> instead.</p>",
    "mdDesc": "<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar str = \"...\"\nstr.toUpperCase(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar str = \"...\"\nstr = str.toUpperCase();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2201} instead.</p>",
    "severity": "MAJOR",
    "status": "DEPRECATED",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2123",
    "repo": "javascript",
    "name": "Values should not be uselessly incremented",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet i = 0;\ni++;\n</pre>",
    "mdDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet i = 0;\ni++;\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:TrailingComment",
    "repo": "javascript",
    "name": "Comments should not be located at the end of lines of code",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>",
    "mdDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "legalCommentPattern",
        "htmlDesc": "Pattern for text of trailing comments that are allowed.",
        "defaultValue": "^//\\s*+[^\\s]++$",
        "type": "STRING"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:CommentedCode",
    "repo": "javascript",
    "name": "Sections of code should not be commented out",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>",
    "mdDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\". </li>\n  <li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments. </li>\n  <li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments. </li>\n  <li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\" </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "misra",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:CommentRegularExpression",
    "repo": "javascript",
    "name": "Track comments matching a regular expression",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
    "mdDesc": "<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": true,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "message",
        "htmlDesc": "The issue message",
        "defaultValue": "The regular expression matches this comment.",
        "type": "STRING"
      },
      {
        "key": "regularExpression",
        "htmlDesc": "The regular expression",
        "type": "STRING"
      }
    ],
    "debtOverloaded": false,
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:UnreachableCode",
    "repo": "javascript",
    "name": "Jump statements should not be followed by dead code",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             // Noncompliant; this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   // Compliant\n  default:\n    doSomething();\n}\n</pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.</p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the\ncurrent code block. So any statements that come after a jump are dead code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun(a) {\n  var i = 10;\n  return i + a;\n  i++;             // Noncompliant; this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun(int a) {\n  var i = 10;\n  return i + a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores unreachable <code>break</code> statements in <code>switch</code> clauses.</p>\n<pre>\nswitch (x) {\n  case 42:\n     return 43;\n     break;   // Compliant\n  default:\n    doSomething();\n}\n</pre>\n<p>Hoisted variables declarations without initialization are always considered reachable.</p>\n<pre>\nfunction bar() {\n  return x = function() {\n    x.foo = 42;\n  }\n  var x;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code </li>\n  <li> MISRA C++:2008, 0-1-1 - A project shall not contain unreachable code </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code </li>\n  <li> MISRA C:2012, 2.1 - A project shall not contain unreachable code </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/561.html\">MITRE, CWE-561</a> - Dead Code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2137",
    "repo": "javascript",
    "name": "Special identifiers should not be bound or assigned",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>JavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:</p>\n<ul>\n  <li> <code>eval</code> - evaluates a string as JavaScript code </li>\n  <li> <code>arguments</code> - used to access function arguments through indexed properties. </li>\n  <li> <code>undefined</code> - returned for values and properties that have not yet been assigned </li>\n  <li> <code>NaN</code> - Not a Number; returned when math functions fail. </li>\n  <li> <code>Infinity</code> - when a number exceeds the upper limit of the floating point numbers </li>\n</ul>\n<p> </p>\n<p>These words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>",
    "mdDesc": "<p>JavaScript has special identifiers that, while not reserved, still should not be used as identifiers. They include:</p>\n<ul>\n  <li> <code>eval</code> - evaluates a string as JavaScript code </li>\n  <li> <code>arguments</code> - used to access function arguments through indexed properties. </li>\n  <li> <code>undefined</code> - returned for values and properties that have not yet been assigned </li>\n  <li> <code>NaN</code> - Not a Number; returned when math functions fail. </li>\n  <li> <code>Infinity</code> - when a number exceeds the upper limit of the floating point numbers </li>\n</ul>\n<p> </p>\n<p>These words should not be bound or assigned, because doing so would overwrite the original definitions of these identifiers. What's more, assigning\nor binding some of these names will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function(\"arguments\", \"return 17;\"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { }\nvar y = function fun() { };\nvar f = new Function(\"args\", \"return 17;\");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2138",
    "repo": "javascript",
    "name": "\"undefined\" should not be assigned",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>",
    "mdDesc": "<p><code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing\nvariable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead,\n<code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2259",
    "repo": "javascript",
    "name": "Properties of variables with \"null\" or \"undefined\" values should not be accessed",
    "createdAt": "2016-09-01T10:15:29+0200",
    "htmlDesc": "<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>\nblock. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); // Noncompliant; TypeError will be thrown\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
    "mdDesc": "<p>When a variable is assigned an <code>undefined</code> or <code>null</code> value, it has no properties. Trying to access properties of such a\nvariable anyway results in a <code>TypeError</code>, causing abrupt termination of the script if the error is not caught in a <code>catch</code>\nblock. But instead of <code>catch</code>-ing this condition, it is best to avoid it altogether.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x === undefined) {\n  console.log(x.length); // Noncompliant; TypeError will be thrown\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n  </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2376",
    "repo": "javascript",
    "name": "Property getters and setters should come in pairs",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.</p>\n<p>This rule also enforces the reverse situation (getter but no setter).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    }\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    },\n    get foo() {\n        return this.fooval;\n    }\n};\n</pre>\n<p>or </p>\n<pre>\nvar obj = {\n    setFoo(value) {    // a standard method, not a setter\n        this.fooval = value;\n    }\n};\n</pre>",
    "mdDesc": "<p>When an object is created with a setter for a property but without a getter for that property, the property is inaccessible and is thus\nuseless.</p>\n<p>This rule also enforces the reverse situation (getter but no setter).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    }\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n    set foo(value) {\n        this.fooval = value;\n    },\n    get foo() {\n        return this.fooval;\n    }\n};\n</pre>\n<p>or </p>\n<pre>\nvar obj = {\n    setFoo(value) {    // a standard method, not a setter\n        this.fooval = value;\n    }\n};\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2817",
    "repo": "javascript",
    "name": "Web SQL databases should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some\nbrowsers. (It is not supported in Firefox or IE.)</p>\n<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar db = window.openDatabase(\"myDb\", \"1.0\", \"Personal secrets stored here\", 2*1024*1024);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>\n</ul>",
    "mdDesc": "<p>The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some\nbrowsers. (It is not supported in Firefox or IE.)</p>\n<p>Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar db = window.openDatabase(\"myDb\", \"1.0\", \"Personal secrets stored here\", 2*1024*1024);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> OWASP Top 10 2017 Category A9 - Using Components with Known Vulnerabilities </li>\n</ul>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "html5",
      "owasp-a3",
      "owasp-a9"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2h",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2h",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2h",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2h",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S2251",
    "repo": "javascript",
    "name": "A \"for\" loop update clause should move the counter in the right direction",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More\ntypically, an infinite <code>for</code> loop is a bug. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
    "mdDesc": "<p>A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run\ninfinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More\ntypically, an infinite <code>for</code> loop is a bug. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i &lt; strings.length; i++) {\n  //...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2814",
    "repo": "javascript",
    "name": "Variables and functions should not be redeclared",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.</p>\n<p>This rule also applies to function parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {  // Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n</pre>",
    "mdDesc": "<p>This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to use the same symbol multiple times as\neither a variable or a function, but doing so is likely to confuse maintainers. Further it's possible that such reassignments are made in error, with\nthe developer not realizing that the value of the variable is overwritten by the new assignment.</p>\n<p>This rule also applies to function parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints \"foo\"\n\nfunction myFunc(arg) {\n  var arg = \"event\"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {\n  console.log(\"foo\");\n}\n\nfun(); // prints \"bar\"\n\nfunction fun() {  // Noncompliant\n  console.log(\"bar\");\n}\n\nfun(); // prints \"bar\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = \"event\";\n}\n\nfun(); // prints \"foo\"\n\nfunction fun() {\n  print(\"foo\");\n}\n\nfun(); // prints \"foo\"\n\nfunction printBar() {\n  print(\"bar\");\n}\n\nprintBar(); // prints \"bar\"\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S138",
    "repo": "javascript",
    "name": "Functions should not have too many lines",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n<h2>Exceptions</h2>\n<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned\na name.</p>\n<pre>\n(function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>",
    "mdDesc": "<p>A function that grows too large tends to aggregate too many responsibilities.</p>\n<p>Such functions inevitably become harder to understand and therefore harder to maintain. </p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.</p>\n<p>Those smaller functions will not only be easier to understand, but also probably easier to test.</p>\n<h2>Exceptions</h2>\n<p>This function ignores Immediately Invoked Function Expressions (IIFE), which are functions that are created and invoked without ever being assigned\na name.</p>\n<pre>\n(function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "max",
        "htmlDesc": "Maximum authorized lines in a function",
        "defaultValue": "200",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2189",
    "repo": "javascript",
    "name": "Loops should not be infinite",
    "createdAt": "2017-02-08T00:48:09+0100",
    "htmlDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h3>Known Limitations</h3>\n<ul>\n  <li> False positives: when <code>yield</code> is used - <a href=\"https://github.com/SonarSource/SonarJS/issues/674\">Issue #674</a>. </li>\n  <li> False positives: when an exception is raised by a function invoked within the loop. </li>\n  <li> False negatives: when a loop condition is based on an element of an array or object. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nvar j = 0;\nwhile (true) { // Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { // Noncompliant; constant end condition\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\nwhile (true) { // break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
    "mdDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h3>Known Limitations</h3>\n<ul>\n  <li> False positives: when <code>yield</code> is used - <a href=\"https://github.com/SonarSource/SonarJS/issues/674\">Issue #674</a>. </li>\n  <li> False positives: when an exception is raised by a function invoked within the loop. </li>\n  <li> False negatives: when a loop condition is based on an element of an array or object. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nvar j = 0;\nwhile (true) { // Noncompliant; constant end condition\n  j++;\n}\n\nvar k;\nvar b = true;\nwhile (b) { // Noncompliant; constant end condition\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\nwhile (true) { // break will potentially allow leaving the loop\n  if (someCondition) {\n    break;\n  }\n}\n\nvar k;\nvar b = true;\nwhile (b) {\n  k++;\n  b = k &lt; 10;\n}\n\nouter:\nwhile(true) {\n  while(true) {\n    break outer;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:ParsingError",
    "repo": "javascript",
    "name": "JavaScript parser failure",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>",
    "mdDesc": "<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the\nnumber of files that do not parse but also to easily find out why they do not parse.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2508",
    "repo": "javascript",
    "name": "The names of model properties should not contain spaces",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts\nspace-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            'first name': 'Bob',      // Noncompliant\n            'birth date': new Date()  // Noncompliant\n        },\n    });\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: 'Bob',\n            birthDate: new Date()\n        },\n    });\n</pre>",
    "mdDesc": "<p>When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts\nspace-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            'first name': 'Bob',      // Noncompliant\n            'birth date': new Date()  // Noncompliant\n        },\n    });\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: 'Bob',\n            birthDate: new Date()\n        },\n    });\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "backbone"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:LineLength",
    "repo": "javascript",
    "name": "Lines should not be too long",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
    "mdDesc": "<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximumLineLength",
        "htmlDesc": "The maximum authorized line length.",
        "defaultValue": "180",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1656",
    "repo": "javascript",
    "name": "Variables should not be self-assigned",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "3min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "3min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "3min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "3min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:TooManyBreakOrContinueInLoop",
    "repo": "javascript",
    "name": "Loops should not contain more than a single \"break\" or \"continue\" statement",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert(\"i = \" + i);\n}\n</pre>",
    "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one,\nthe code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert(\"i = \" + i);\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "20min",
    "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "20min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "20min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "20min",
    "remFnOverloaded": false,
    "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3271",
    "repo": "javascript",
    "name": "Local storage should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb\ncookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because\nthe data is not encrypted by default and any script on the page may access it.</p>\n<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlocalStorage.setItem(\"login\", login); // Noncompliant\nsessionStorage.setItem(\"sessionId\", sessionId); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf\">Packet Storm Security</a> - HTML 5 Modern\n  Day Attack And Defence Vectors </li>\n</ul>",
    "mdDesc": "<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb\ncookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because\nthe data is not encrypted by default and any script on the page may access it.</p>\n<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlocalStorage.setItem(\"login\", login); // Noncompliant\nsessionStorage.setItem(\"sessionId\", sessionId); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n  <li> <a href=\"https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf\">Packet Storm Security</a> - HTML 5 Modern\n  Day Attack And Defence Vectors </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "owasp-a3"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "5min",
    "defaultDebtRemFnOffset": "1h",
    "effortToFixDescription": "per additional use of the api",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "5min",
    "debtRemFnOffset": "1h",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "5min",
    "defaultRemFnBaseEffort": "1h",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "5min",
    "remFnBaseEffort": "1h",
    "remFnOverloaded": false,
    "gapDescription": "per additional use of the api",
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S3834",
    "repo": "javascript",
    "name": "\"Symbol\" should not be used as a constructor",
    "createdAt": "2017-02-08T00:48:09+0100",
    "htmlDesc": "<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>\n<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise\na <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst sym = new Symbol(\"foo\");   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst sym = Symbol(\"foo\");\n</pre>",
    "mdDesc": "<p><code>Symbol</code> is a primitive type introduced in ECMAScript2015. Its instances are mainly used as unique property keys.</p>\n<p>An instance can only be created by using <code>Symbol</code> as a function. Using <code>Symbol</code> with the <code>new</code> operator will raise\na <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst sym = new Symbol(\"foo\");   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst sym = Symbol(\"foo\");\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S905",
    "repo": "javascript",
    "name": "Non-empty statements should change control flow or have at least one side-effect",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1; // Noncompliant; was assignment intended?\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>",
    "mdDesc": "<p>Any statement (other than a null statement, which means a statement containing only a semicolon <code>;</code>) which has no side effect and does\nnot result in a change of control flow will normally indicate a programming error, and therefore should be refactored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na == 1; // Noncompliant; was assignment intended?\nvar msg = \"Hello, \"\n  \"World!\"; // Noncompliant; have we forgotten '+' operator on previous line?\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/482\">MITRE, CWE-482</a> - Comparing instead of Assigning </li>\n  <li> MISRA C:2004, 14.2 - All non-null statements shall either have at least one side-effect however executed, or cause control flow to change.\n  </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "misra",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S104",
    "repo": "javascript",
    "name": "Files should not have too many lines",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
    "mdDesc": "<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "maximum",
        "htmlDesc": "Maximum authorized lines in a file.",
        "defaultValue": "1000",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1h",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1h",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1h",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1h",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2870",
    "repo": "javascript",
    "name": "\"delete\" should not be used on arrays",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>\n<p>The proper method for removing an element at a certain index would be:</p>\n<ul>\n  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>\n  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>\n  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>",
    "mdDesc": "<p>The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be\nused here too, but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion. </p>\n<p>The proper method for removing an element at a certain index would be:</p>\n<ul>\n  <li> <code>Array.prototype.splice</code> - add/remove elements from the array </li>\n  <li> <code>Array.prototype.pop</code> - add/remove elements from the end of the array </li>\n  <li> <code>Array.prototype.shift</code> - add/remove elements from the beginning of the array </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray =&gt; ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray =&gt; ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2873",
    "repo": "javascript",
    "name": "Calls should not be made to non-callable values",
    "createdAt": "2016-09-02T20:13:38+0200",
    "htmlDesc": "<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. </p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be\nraised if you do.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo = 1;\nfoo();   // Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  // Noncompliant; TypeError\n</pre>",
    "mdDesc": "<p>The fact that JavaScript is not a strongly typed language allows developers a lot of freedom, but that freedom can be dangerous if you go too far\nwith it. </p>\n<p>Specifically, it is syntactically acceptable to invoke any expression as though its value were a function. But a <code>TypeError</code> may be\nraised if you do.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo = 1;\nfoo();   // Noncompliant; TypeError\n\nfoo = undefined;\nfoo();  // Noncompliant; TypeError\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2990",
    "repo": "javascript",
    "name": "The global \"this\" object should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the\n<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace\nit with <code>window</code>; it will have the same effect and be more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>",
    "mdDesc": "<p>When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object, which is the same thing as the\n<code>window</code> object in a standard web page. Such uses could be confusing to maintainers. Instead, simply drop the <code>this</code>, or replace\nit with <code>window</code>; it will have the same effect and be more readable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2757",
    "repo": "javascript",
    "name": "Non-existent operators '=+', '=-' and '=!' should not be used",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when\nthere is at least one whitespace after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet target =-5;\nlet num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet target = -5;\nlet num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
    "mdDesc": "<p>The use of operators pairs (<code>=+</code>, <code>=-</code> or <code>=!</code>) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code> and <code>=!</code> are used without any space between the two operators and when\nthere is at least one whitespace after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet target =-5;\nlet num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet target = -5;\nlet num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2999",
    "repo": "javascript",
    "name": "\"new\" operators should be used with functions",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>",
    "mdDesc": "<p>The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a\n<code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "considerJSDoc",
        "htmlDesc": "Consider only functions with @constructor tag as constructor functions",
        "defaultValue": "false",
        "type": "BOOLEAN"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:StrictMode",
    "repo": "javascript",
    "name": "\"strict\" mode should be used with caution",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>",
    "mdDesc": "<p>Even though it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not\nsupport it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not\nsupport it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cross-browser",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1788",
    "repo": "javascript",
    "name": "Function parameters with default values should be last",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify\nas many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>\n<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to \"get to\"\nthe non-default parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction multiply(a = 1, b) {  // Noncompliant\n  return a*b;\n}\n\nvar x = multiply(42);  // returns NaN as b is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction multiply(b, a = 1) {\n  return a*b;\n}\n\nvar x = multiply(42);  // returns 42 as expected\n</pre>",
    "mdDesc": "<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify\nas many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>\n<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it\nimpossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to \"get to\"\nthe non-default parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction multiply(a = 1, b) {  // Noncompliant\n  return a*b;\n}\n\nvar x = multiply(42);  // returns NaN as b is undefined\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction multiply(b, a = 1) {\n  return a*b;\n}\n\nvar x = multiply(42);  // returns 42 as expected\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1994",
    "repo": "javascript",
    "name": "\"for\" loop increment clauses should modify the loops' counters",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
    "mdDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3723",
    "repo": "javascript",
    "name": "Trailing commas should be used",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration\ndoes not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\"      // Noncompliant\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\",    // OK\n};\n\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\"};   // OK\n</pre>",
    "mdDesc": "<p>Modern browsers ignore unneeded, trailing commas, so there are no negatives to having them unless you're supporting an IE 8 application. Since they\nmake adding new properties simpler, their use is preferred. This rule raises an issue when the last item in an object declaration or array declaration\ndoes not end with a trailing comma and does not lie on the same line as the closing curly brace or bracket.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\"      // Noncompliant\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\",    // OK\n};\n\nvar joe = {\n  fname: \"Joe\",\n  lname: \"Smith\"};   // OK\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1751",
    "repo": "javascript",
    "name": "Jump statements should not be used unconditionally",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>Having an unconditional <code>break</code>, <code>return</code> or <code>throw</code> in a loop renders it useless; the loop will only execute once\nand the loop structure itself is simply wasted keystrokes.</p>\n<p>Having an unconditional <code>continue</code> in a loop is itself wasted keystrokes.</p>\n<p>For these reasons, unconditional jump statements should never be used except for the final <code>return</code> in a function or method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  break;  // loop only executes once\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  continue;  // this is meaningless; the loop would continue anyway\n}\n\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n  return;  // loop only executes once\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  console.log(\"i is \" + i);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.1 - There shall be no unreachable code. </li>\n  <li> MISRA C++:2008, 0-1-1 - A <em>project</em> shall not contain <em>unreachable code</em>. </li>\n  <li> MISRA C++:2008, 0-1-9 - There shall be no dead code. </li>\n  <li> MISRA C:2012, 2.2 - There shall be no dead code </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3499",
    "repo": "javascript",
    "name": "Shorthand object properties should be grouped at the beginning or end of an object declaration",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet obj1 = {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj1 = {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n</pre>\n<p>or </p>\n<pre>\nlet obj1 = {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n</pre>",
    "mdDesc": "<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand\ndeclarations grouped at either the beginning or end of an object.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet obj1 = {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet obj1 = {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n</pre>\n<p>or </p>\n<pre>\nlet obj1 = {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1871",
    "repo": "javascript",
    "name": "Two branches in a conditional structure should not have exactly the same implementation",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>",
    "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doFirstThing();\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "design",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3498",
    "repo": "javascript",
    "name": "Object literal shorthand syntax should be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a,\n  fun () {\n    //...\n  }\n}\n</pre>",
    "mdDesc": "<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly,\nobject-shorthand is also preferred for the definition of functions in object literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a,\n  fun () {\n    //...\n  }\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:Eval",
    "repo": "javascript",
    "name": "Code should not be dynamically injected and executed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.</p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar value = eval('obj.' + propName); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar value = obj[propName];\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when the argument of the <code>eval</code> call is a literal string as it is reasonably safe.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
    "mdDesc": "<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Dynamically evaluating code is slow and a potential security issue when\nthe arguments haven't been properly validated.</p>\n<p>In general it is better to avoid it altogether, particularly when there are safer alternatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar value = eval('obj.' + propName); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar value = obj[propName];\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when the argument of the <code>eval</code> call is a literal string as it is reasonably safe.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/95.html\">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically\n  Evaluated Code ('Eval Injection') </li>\n  <li> OWASP Top 10 2017 Category A7 - Cross-Site Scripting (XSS) </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "owasp-a7"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:FutureReservedWords",
    "repo": "javascript",
    "name": "\"future reserved words\" should not be used as identifiers",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier\nadoption of those potential future versions:</p>\n<ul>\n  <li> <code>await</code> </li>\n  <li> <code>class</code> </li>\n  <li> <code>const</code> </li>\n  <li> <code>enum</code> </li>\n  <li> <code>export</code> </li>\n  <li> <code>extends</code> </li>\n  <li> <code>implements</code> </li>\n  <li> <code>import</code> </li>\n  <li> <code>interface</code> </li>\n  <li> <code>let</code> </li>\n  <li> <code>package</code> </li>\n  <li> <code>private</code> </li>\n  <li> <code>protected</code> </li>\n  <li> <code>public</code> </li>\n  <li> <code>static</code> </li>\n  <li> <code>super</code> </li>\n  <li> <code>yield</code> </li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar package = document.getElementsByName(\"foo\"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar elements = document.getElementsByName(\"foo\"); // Compliant\n</pre>",
    "mdDesc": "<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier\nadoption of those potential future versions:</p>\n<ul>\n  <li> <code>await</code> </li>\n  <li> <code>class</code> </li>\n  <li> <code>const</code> </li>\n  <li> <code>enum</code> </li>\n  <li> <code>export</code> </li>\n  <li> <code>extends</code> </li>\n  <li> <code>implements</code> </li>\n  <li> <code>import</code> </li>\n  <li> <code>interface</code> </li>\n  <li> <code>let</code> </li>\n  <li> <code>package</code> </li>\n  <li> <code>private</code> </li>\n  <li> <code>protected</code> </li>\n  <li> <code>public</code> </li>\n  <li> <code>static</code> </li>\n  <li> <code>super</code> </li>\n  <li> <code>yield</code> </li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar package = document.getElementsByName(\"foo\"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar elements = document.getElementsByName(\"foo\"); // Compliant\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "lock-in",
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2611",
    "repo": "javascript",
    "name": "Untrusted content should not be included",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this\nrule raises an issue for each non-relative URL.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction include(url) {\n  var s = document.createElement(\"script\");\n  s.setAttribute(\"type\", \"text/javascript\");\n  s.setAttribute(\"src\", url);\n  document.body.appendChild(s);\n}\ninclude(\"http://hackers.com/steal.js\")  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/829\">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>",
    "mdDesc": "<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this\nrule raises an issue for each non-relative URL.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction include(url) {\n  var s = document.createElement(\"script\");\n  s.setAttribute(\"type\", \"text/javascript\");\n  s.setAttribute(\"src\", url);\n  document.body.appendChild(s);\n}\ninclude(\"http://hackers.com/steal.js\")  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/829\">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere </li>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "owasp-a1",
      "sans-top25-risky"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "domainsToIgnore",
        "htmlDesc": "Comma-delimited list of domains to ignore. Regexes may be used, e.g. (.*\\.)?example.com,foo.org",
        "type": "STRING"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S100",
    "repo": "javascript",
    "name": "Function and method names should comply with a naming convention",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nfunction DoSomething(){...}  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>",
    "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all function names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nfunction DoSomething(){...}  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "format",
        "htmlDesc": "Regular expression used to check the function names against.",
        "defaultValue": "^[_a-z][a-zA-Z0-9]*$",
        "type": "STRING"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S101",
    "repo": "javascript",
    "name": "Class names should comply with a naming convention",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>",
    "mdDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "format",
        "htmlDesc": "Regular expression used to check the class names against.",
        "defaultValue": "^[A-Z][a-zA-Z0-9]*$",
        "type": "STRING"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:UnusedFunctionArgument",
    "repo": "javascript",
    "name": "Unused function parameters should be removed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\nFor instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>\n<pre>\n$([\"first\", \"last\"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function\nsignature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>\n<p>Examples :</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported\n                                              return p2; }\n</pre>\n<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused. </p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "mdDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // \"a\" is unused\n  return compute(b);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\nFor instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:</p>\n<pre>\n$([\"first\", \"last\"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function\nsignature. Unused arguments which are followed by an argument that <em>is</em> used will be ignored.</p>\n<p>Examples :</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  // p2 is ignored, but p4 is reported\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  // p1, p2 and p3 are ignored\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  // p1 is ignored but p3 and p4 are reported\n                                              return p2; }\n</pre>\n<p>Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused. </p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions. </li>\n  <li> MISRA C:2012, 2.7 - There should be no unused parameters in functions </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never\n  executed </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3512",
    "repo": "javascript",
    "name": "Template strings should be used instead of concatenation",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.</p>\n<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(\"hello \" + name);  // ignored\n}\n\nfunction madLib(verb, noun) {\n  console.log(\"I really \" + verb + \" one or two \" + noun);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(`hello ${name}`);  // no issue raised before, but this is better\n}\n\nfunction madLib(verb, noun) {\n  console.log(`I really ${verb} one or two ${noun}`);\n}\n</pre>",
    "mdDesc": "<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are\npreferred in environments that support ECMAScript 2015.</p>\n<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(\"hello \" + name);  // ignored\n}\n\nfunction madLib(verb, noun) {\n  console.log(\"I really \" + verb + \" one or two \" + noun);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction sayHello(name) {\n  console.log(`hello ${name}`);  // no issue raised before, but this is better\n}\n\nfunction madLib(verb, noun) {\n  console.log(`I really ${verb} one or two ${noun}`);\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3827",
    "repo": "javascript",
    "name": "Non-existent variables should not be referenced",
    "createdAt": "2017-02-08T00:48:08+0100",
    "htmlDesc": "<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>\n<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>\n<ul>\n  <li> When typo was made in a symbol's name. </li>\n  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not\n  hoisted to the top of the scope). </li>\n  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike\n  <code>var</code>-declarations, having function scope). </li>\n  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>\n</ul>\n<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and\n<code>sonar.javascript.environments</code> properties.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar john = {\n  firstName: \"john\",\n  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined\n}\njohn.show();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar john = {\n  firstName: \"john\",\n  show: function() { console.log(this.firstName); }\n}\njohn.show();\n</pre>",
    "mdDesc": "<p>When a non-existent variable is referenced a <code>ReferenceError</code> is raised.</p>\n<p>Due to the dynamic nature of JavaScript this can happen in a number of scenarios:</p>\n<ul>\n  <li> When typo was made in a symbol's name. </li>\n  <li> When using variable declared with <code>let</code> or <code>const</code> before declaration (unlike <code>var</code>-declarations, they are not\n  hoisted to the top of the scope). </li>\n  <li> Due to confusion with scopes of <code>let</code>- and <code>const</code>-declarations (they have block scope, unlike\n  <code>var</code>-declarations, having function scope). </li>\n  <li> When accessing a property in the wrong scope (e.g. forgetting to specify <code>this.</code>). </li>\n</ul>\n<p>This rule does not raise issues on global variables which are defined with <code>sonar.javascript.globals</code> and\n<code>sonar.javascript.environments</code> properties.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar john = {\n  firstName: \"john\",\n  show: function() { console.log(firstName); } // Noncompliant: firstName is not defined\n}\njohn.show();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar john = {\n  firstName: \"john\",\n  show: function() { console.log(this.firstName); }\n}\njohn.show();\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3828",
    "repo": "javascript",
    "name": "\"yield\" expressions should not be used outside generators",
    "createdAt": "2017-02-08T00:48:08+0100",
    "htmlDesc": "<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>",
    "mdDesc": "<p>The <code>yield</code> keyword is used in a generator function to return an <code>IteratorResult</code> to the caller. It has no other purpose, and\nif found outside such a function will raise a <code>ReferenceError</code> because it is then treated as an identifier.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction * foo() {\n  for (var i = 0; i &lt; 5; i++) {\n    yield i * 2;\n  }\n}\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:TabCharacter",
    "repo": "javascript",
    "name": "Tabulation characters should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
    "mdDesc": "<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of the tabulation character must be banned.</p>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1697",
    "repo": "javascript",
    "name": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed,\nthe code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is\nnull-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != null || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str != undefined || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == null || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str == undefined || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/sonar/coding_rules#rule_key=javascript%3AS2259'>S2259</a> instead.</p>",
    "mdDesc": "<p>When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed,\nthe code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is\nnull-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != null || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str != undefined || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log(\"String is empty\");\n}\n\nif (str == null || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n\nif (str == undefined || str.length &gt; 0) {\n  console.log(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:javascript:S2259} instead.</p>",
    "severity": "MAJOR",
    "status": "DEPRECATED",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2424",
    "repo": "javascript",
    "name": "Built-in objects should not be overridden",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.</p>\n<p>This rule detects overrides of the following native objects:</p>\n<ul>\n  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError </li>\n  <li> Numbers and dates - Number, Math, Date </li>\n  <li> Text processing - String, RegExp </li>\n  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array </li>\n  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>\n  <li> Structured data - ArrayBuffer, DataView, JSON </li>\n  <li> Control abstraction objects - Promise </li>\n  <li> Reflection - Reflect, Proxy </li>\n  <li> Internationalization - Intl </li>\n  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>\n</ul>",
    "mdDesc": "<p>Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could\ntherefore have broad, potentially catastrophic effects on previously-working code.</p>\n<p>This rule detects overrides of the following native objects:</p>\n<ul>\n  <li> Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError,\n  URIError </li>\n  <li> Numbers and dates - Number, Math, Date </li>\n  <li> Text processing - String, RegExp </li>\n  <li> Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array,\n  Float64Array </li>\n  <li> Keyed collections - Map, Set, WeakMap, WeakSet </li>\n  <li> Structured data - ArrayBuffer, DataView, JSON </li>\n  <li> Control abstraction objects - Promise </li>\n  <li> Reflection - Reflect, Proxy </li>\n  <li> Internationalization - Intl </li>\n  <li> Non-standard objects - Generator, Iterator, ParallelArray, StopIteration </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3513",
    "repo": "javascript",
    "name": "\"arguments\" should not be accessed directly",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args <code>function</code>. </p>\n<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>\n<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then\ninside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction concatenate() {\n  let args = Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue) {\n  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction concatenate(...args) {\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n</pre>",
    "mdDesc": "<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those\npassed-in arguments inside the no-args <code>function</code>. </p>\n<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is\nconfusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>\n<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then\ninside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction concatenate() {\n  let args = Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue) {\n  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction concatenate(...args) {\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "api-design",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:VariableShadowing",
    "repo": "javascript",
    "name": "Variables should not be shadowed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.\nFurther, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let x = bar(2); // Noncompliant\n      console.log(x);\n  } else {\n     console.log(\"Wrong Value\");\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let y = bar(2);\n      console.log(y);\n  } else {\n     console.log(\"Wrong Value\");\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that\n  identifier </li>\n  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwE\">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>\n</ul>",
    "mdDesc": "<p>Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code.\nFurther, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let x = bar(2); // Noncompliant\n      console.log(x);\n  } else {\n     console.log(\"Wrong Value\");\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = bar(1);\n  if (x &gt; 0) {\n      let y = bar(2);\n      console.log(y);\n  } else {\n     console.log(\"Wrong Value\");\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 5.2 - Identifiers in an inner scope shall not use the same name as an identifier in an outer scope, and therefore hide that\n  identifier </li>\n  <li> MISRA C++:2008, 2-10-2 - Identifiers declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> MISRA C:2012, 5.3 - An identifier declared in an inner scope shall not hide an identifier declared in an outer scope </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwE\">CERT, DCL01-C.</a> - Do not reuse variable names in subscopes </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1219",
    "repo": "javascript",
    "name": "\"switch\" statements should not contain non-case labels",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>",
    "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of \"case WEDNESDAY\"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n</ul>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "misra",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1451",
    "repo": "javascript",
    "name": "Track lack of copyright and license headers",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
    "mdDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "headerFormat",
        "htmlDesc": "Expected copyright and license header",
        "type": "TEXT"
      },
      {
        "key": "isRegularExpression",
        "htmlDesc": "Whether the headerFormat is a regular expression",
        "defaultValue": "false",
        "type": "BOOLEAN"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2427",
    "repo": "javascript",
    "name": "The base should be provided to \"parseInt\"",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nparseInt(\"010\");  // Noncompliant; pre-2013 browsers may return 8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nparseInt(\"010\", 10);\n</pre>",
    "mdDesc": "<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument, and one that does not. Unfortunately using\nthe single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nparseInt(\"010\");  // Noncompliant; pre-2013 browsers may return 8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nparseInt(\"010\", 10);\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3516",
    "repo": "javascript",
    "name": "Function returns should not be invariant",
    "createdAt": "2017-06-28T05:23:32+0200",
    "htmlDesc": "<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.</p>\n<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  let b = 12;\n  if (a) {\n    return b;\n  }\n  return b;\n}\n</pre>",
    "mdDesc": "<p>When a function is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is likely a mistake.</p>\n<p>This rule raises an issue when a function contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {  // Noncompliant\n  let b = 12;\n  if (a) {\n    return b;\n  }\n  return b;\n}\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "2min",
    "effortToFixDescription": "Per number of return statements",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "2min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "2min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "2min",
    "remFnOverloaded": false,
    "gapDescription": "Per number of return statements",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3758",
    "repo": "javascript",
    "name": "Values not convertible to numbers should not be used in numeric comparisons",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>In a Zen-like manner, <code>NaN</code> isn't equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one\noperand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that\ncannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>\n<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,\n<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x;  // x is currently \"undefined\"\nif (someCondition()) {\n  x = 42;\n}\n\nif (42 &gt; x) {  // Noncompliant; \"x\" might still be \"undefined\"\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj &gt; 24) { // Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x;\nif (someCondition()) {\n  x = 42;\n} else {\n  x = foo();\n}\n\nif (42 &gt; x) {\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj.prop &gt; 24) {\n  doSomething();\n}\n</pre>",
    "mdDesc": "<p>In a Zen-like manner, <code>NaN</code> isn't equal to anything, even itself. So comparisons (<code>&gt;, &lt;, &gt;=, &lt;=</code>) where one\noperand is <code>NaN</code> or evaluates to <code>NaN</code> always return <code>false</code>. Specifically, <code>undefined</code> and objects that\ncannot be converted to numbers evaluate to <code>NaN</code> when used in numerical comparisons.</p>\n<p>This rule raises an issue when there is at least one path through the code where one of the operands to a comparison is <code>NaN</code>,\n<code>undefined</code> or an <code>Object</code> which cannot be converted to a number.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x;  // x is currently \"undefined\"\nif (someCondition()) {\n  x = 42;\n}\n\nif (42 &gt; x) {  // Noncompliant; \"x\" might still be \"undefined\"\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj &gt; 24) { // Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x;\nif (someCondition()) {\n  x = 42;\n} else {\n  x = foo();\n}\n\nif (42 &gt; x) {\n  doSomething();\n}\n\nvar obj = {prop: 42};\nif (obj.prop &gt; 24) {\n  doSomething();\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3759",
    "repo": "javascript",
    "name": "Non-existent properties should not be read",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Reading a non-existent property on an object always returns <code>undefined</code>. Doing so is usually an error; either in the name of the\nproperty or the type of the variable being accessed.</p>\n<p>If an attempt is made to access properties of a primitive, the primitive is automatically encased in a primitive-wrapper object for the operation.\nBut being \"promoted\" to an object doesn't mean that the primitive will actually have properties to access. The wrapper object still won't have the\nnon-existent property and <code>undefined</code> will be returned instead. </p>\n<p>This rule raises an issue when an attempt is made to access properties of a primitive. Thus this rule should only be activated when you don't use\nmonkey patching for standard objects, like <code>Number</code>, <code>Boolean</code> and <code>String</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 42;\ny = x.length;   // Noncompliant, Number type doesn't have \"length\" property\n</pre>\n<h2>Exceptions</h2>\n<p>The Ember framework introduces a few extensions to <code>String</code>. Since it is a widely used package, the following <code>String</code>\nproperties will not trigger this rule even though they are not built-in:</p>\n<ul>\n  <li> <code>camelize</code> </li>\n  <li> <code>capitalize</code> </li>\n  <li> <code>classify</code> </li>\n  <li> <code>dasherize</code> </li>\n  <li> <code>decamelize</code> </li>\n  <li> <code>fmt</code> </li>\n  <li> <code>loc</code> </li>\n  <li> <code>underscore</code> </li>\n  <li> <code>w</code> </li>\n</ul>",
    "mdDesc": "<p>Reading a non-existent property on an object always returns <code>undefined</code>. Doing so is usually an error; either in the name of the\nproperty or the type of the variable being accessed.</p>\n<p>If an attempt is made to access properties of a primitive, the primitive is automatically encased in a primitive-wrapper object for the operation.\nBut being \"promoted\" to an object doesn't mean that the primitive will actually have properties to access. The wrapper object still won't have the\nnon-existent property and <code>undefined</code> will be returned instead. </p>\n<p>This rule raises an issue when an attempt is made to access properties of a primitive. Thus this rule should only be activated when you don't use\nmonkey patching for standard objects, like <code>Number</code>, <code>Boolean</code> and <code>String</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = 42;\ny = x.length;   // Noncompliant, Number type doesn't have \"length\" property\n</pre>\n<h2>Exceptions</h2>\n<p>The Ember framework introduces a few extensions to <code>String</code>. Since it is a widely used package, the following <code>String</code>\nproperties will not trigger this rule even though they are not built-in:</p>\n<ul>\n  <li> <code>camelize</code> </li>\n  <li> <code>capitalize</code> </li>\n  <li> <code>classify</code> </li>\n  <li> <code>dasherize</code> </li>\n  <li> <code>decamelize</code> </li>\n  <li> <code>fmt</code> </li>\n  <li> <code>loc</code> </li>\n  <li> <code>underscore</code> </li>\n  <li> <code>w</code> </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2549",
    "repo": "javascript",
    "name": "The \"changed\" property should not be manipulated directly",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>According to the Backbone.js docs</p>\n<blockquote>\n  The\n  <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update\n  <strong>changed</strong> directly since its state is internally maintained by set. A copy of\n  <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n<p>The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated. If you modify\nit manually, you can break the resorting of the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>",
    "mdDesc": "<p>According to the Backbone.js docs</p>\n<blockquote>\n  The\n  <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update\n  <strong>changed</strong> directly since its state is internally maintained by set. A copy of\n  <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n<p>The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated. If you modify\nit manually, you can break the resorting of the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "backbone"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3514",
    "repo": "javascript",
    "name": "Destructuring syntax should be used for assignments",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic. </p>\n<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var a = obj1.a;  // Noncompliant\n  var b = obj1.b;\n\n  var name = obj2.name;  // ignored; there's only one extraction-and-assignment\n\n  var zero = array[0];  // Noncompliant\n  var one = array[1];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var {a, b} = obj1;\n\n  var {name} = obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] = array;\n}\n</pre>",
    "mdDesc": "<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called\n\"destructuring\", and it allows you to condense boilerplate code so you can concentrate on logic. </p>\n<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var a = obj1.a;  // Noncompliant\n  var b = obj1.b;\n\n  var name = obj2.name;  // ignored; there's only one extraction-and-assignment\n\n  var zero = array[0];  // Noncompliant\n  var one = array[1];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var {a, b} = obj1;\n\n  var {name} = obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] = array;\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3757",
    "repo": "javascript",
    "name": "Arithmetic operations should not result in \"NaN\"",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>\nwhen at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = [1, 2];\nvar y = x / 4;  //Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>\n  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>\n</ul>",
    "mdDesc": "<p>The result of an expression with an arithmetic operator <code>/, *, %, ++, --, -, +=, -=, *=, /=, %=, +</code> or unary operator <code>+, -</code>\nwhen at least one operand is <code>Object</code> or <code>Undefined</code> will be always a <code>NaN</code> (Not a Number).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = [1, 2];\nvar y = x / 4;  //Noncompliant\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> <code>Date</code> operands: they are implicitly converted to numbers. </li>\n  <li> The binary <code>+</code> operator with <code>Object</code> operand (concatenation). </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S4043",
    "repo": "javascript",
    "name": "Array-mutating methods should not be used misleadingly",
    "createdAt": "2017-10-11T12:56:59+0200",
    "htmlDesc": "<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact. <code>reverse</code>\nand <code>sort</code> do not fall into this category. Instead, they alter the source array <em>in addition to</em> returning the altered version,\nwhich is likely not what was intended.</p>\n<p>This rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original\nvalue is altered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar b = a.reverse(); // Noncompliant\nvar d = c.sort(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'\na.reverse();\n\nc.sort(); // this sorts array in place\n</pre>",
    "mdDesc": "<p>Many of JavaScript's <code>Array</code> methods return an altered version of the array while leaving the source array intact. <code>reverse</code>\nand <code>sort</code> do not fall into this category. Instead, they alter the source array <em>in addition to</em> returning the altered version,\nwhich is likely not what was intended.</p>\n<p>This rule raises an issue when the return values of these methods are assigned, which could lead maintainers to overlook the fact that the original\nvalue is altered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar b = a.reverse(); // Noncompliant\nvar d = c.sort(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar b = [...a].reverse();  // de-structure and create a new array, so reverse doesn't impact 'a'\na.reverse();\n\nc.sort(); // this sorts array in place\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:Semicolon",
    "repo": "javascript",
    "name": "Statements should end with semicolons",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>",
    "mdDesc": "<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to\nunexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints \"undefined\", not \"5\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:CurlyBraces",
    "repo": "javascript",
    "name": "Control structures should use curly braces",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
    "mdDesc": "<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\n  executeSomething();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement </li>\n  <li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a\n  compound statement, or another if statement </li>\n  <li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n  </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra",
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S4165",
    "repo": "javascript",
    "name": "Assignments should not be redundant",
    "createdAt": "2017-11-13T09:04:47+0100",
    "htmlDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>",
    "mdDesc": "<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there's no point in\nassigning <code>a</code> to <code>c</code> or vice versa because they're already equivalent. </p>\n<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = b;\nc = a;\nb = c; // Noncompliant: c and b are already the same\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = b;\nc = a;\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "redundant"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:UnusedVariable",
    "repo": "javascript",
    "name": "Unused local variables and functions should be removed",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>",
    "mdDesc": "<p>If a local variable or a local function is declared but not used, it is dead code and should be removed. Doing so will improve maintainability\nbecause developers will not wonder what the variable or function is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3402",
    "repo": "javascript",
    "name": "Strings and non-strings should not be added",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.</p>\n<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = 5 + 8;  // okay\n  let z = \"8\"\n  return x + z;  // Noncompliant; yields string \"138\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = 5 + 8;\n  let z = \"8\"\n  return x + Number(z);\n}\n</pre>",
    "mdDesc": "<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. This could\nbe confusing, specially if it's not obvious that one of the operands is a string. It is recommended to explicitly convert the non-string component to\nmake it easier to understand to future maintainers.</p>\n<p>This rule raises an issue when <code>+</code> is used with a string and a non-string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo() {\n  let x = 5 + 8;  // okay\n  let z = \"8\"\n  return x + z;  // Noncompliant; yields string \"138\"\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo() {\n  let x = 5 + 8;\n  let z = \"8\"\n  return x + Number(z);\n}\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3523",
    "repo": "javascript",
    "name": "Function constructors should not be used",
    "createdAt": "2016-09-01T10:15:29+0200",
    "htmlDesc": "<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.</p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj =  new Function(\"return \" + data)();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = JSON.parse(data);\n</pre>\n<h2>Exceptions</h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
    "mdDesc": "<p>In addition to being obtuse from a syntax perspective, function constructors are also dangerous: their execution evaluates the constructor's string\narguments similar to the way <code>eval</code> works, which could expose your program to random, unintended code which can be both slow and a security\nrisk.</p>\n<p>In general it is better to avoid it altogether, particularly when used to parse JSON data. You should use ECMAScript 5's built-in JSON functions or\na dedicated library.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar obj =  new Function(\"return \" + data)();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = JSON.parse(data);\n</pre>\n<h2>Exceptions</h2>\n<p>Function calls where the argument is a string literal (e.g. <code>(Function('return this'))()</code>) are ignored. </p>\n<h2>See</h2>\n<ul>\n  <li> OWASP Top 10 2017 Category A1 - Injection </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "clumsy",
      "owasp-a1"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:ContinueStatement",
    "repo": "javascript",
    "name": "\"continue\" should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>\n</ul>",
    "mdDesc": "<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured\ncontrol flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i == 5) {\n      continue;  /* Noncompliant */\n    }\n    alert(\"i = \" + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  for (i = 0; i &lt; 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert(\"i = \" + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.5 - The continue statement shall not be used. </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1h",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1h",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1h",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1h",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3403",
    "repo": "javascript",
    "name": "Strict equality operators should not be used with dissimilar types",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,\nrespectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  // Noncompliant; always false\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  // ...\n}\n</pre>",
    "mdDesc": "<p>Comparing dissimilar types using the strict equality operators <code>===</code> and <code>!==</code> will always return the same value,\nrespectively <code>false</code> and <code>true</code>, because no type conversion is done before the comparison. Thus, such comparisons can only be\nbugs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === b) {  // Noncompliant; always false\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a == b) {\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar a = 8;\nvar b = \"8\";\n\nif (a === Number(b)) {\n  // ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3524",
    "repo": "javascript",
    "name": "Braces and parentheses should be used consistently with arrow functions",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the configured defaults forbidding parentheses</p>\n<pre>\nvar foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg\nvar bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar foo = a =&gt; { /* ... */ };\nvar bar = (a, b) =&gt; 0;\n</pre>",
    "mdDesc": "<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does\nnot conform to the configured requirements.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the configured defaults forbidding parentheses</p>\n<pre>\nvar foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg\nvar bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar foo = a =&gt; { /* ... */ };\nvar bar = (a, b) =&gt; 0;\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "body_braces",
        "htmlDesc": "True to require curly braces around function body. False to forbid them for single-return bodies.",
        "defaultValue": "false",
        "type": "BOOLEAN"
      },
      {
        "key": "parameter_parens",
        "htmlDesc": "True to require parentheses around parameters. False to forbid them for single parameter.",
        "defaultValue": "false",
        "type": "BOOLEAN"
      }
    ],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:ArrayAndObjectConstructors",
    "repo": "javascript",
    "name": "Array constructors should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Array literals should always be preferred to Array constructors.</p>\n<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:</p>\n<ul>\n  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>\n</ul>\n<pre>\nlet arr = new Array(3); // [empty × 3]\n</pre>\n<ul>\n  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>\n</ul>\n<pre>\nlet arr = new Array(3.14);  // RangeError: Invalid array length\n</pre>\n<ul>\n  <li> Otherwise the array will have one element with the argument as its value. </li>\n</ul>\n<pre>\nlet arr = new Array(\"3\");  // [\"3\"]\n</pre>\n<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't\ncontain anything, so no callbacks will be applied to the array elements.</p>\n<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.\nlet emptyArray = new Array();          // Noncompliant. Results in 0-element array.\n\nlet unstableArray = new Array(n);      // Noncompliant. Variable in results.\n\nlet arr = new Array(3); // Noncompliant; empty array of length 3\narr.foreach((x) =&gt; alert(\"Hello \" + x)); // callback is not executed because there's nothing in arr\nlet anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet myArray = [x1, x2, x3];\nlet emptyArray = [];\n\n// if \"n\" is the only array element\nlet unstableArray = [n];\n// or,  if \"n\" is the array length (since ES 2015)\nlet unstableArray = Array.from({length: n});\n\nlet arr = [\"Elena\", \"Mike\", \"Sarah\"];\narr.foreach((x) =&gt; alert(\"Hello \" + x));\nlet anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element\n</pre>",
    "mdDesc": "<p>Array literals should always be preferred to Array constructors.</p>\n<p>Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be\nequal to the number of arguments. However, using a single argument will have one of three consequences:</p>\n<ul>\n  <li> If the argument is a number and it is a natural number the length will be equal to the value of the argument. </li>\n</ul>\n<pre>\nlet arr = new Array(3); // [empty × 3]\n</pre>\n<ul>\n  <li> If the argument is a number, but not a natural number an exception will be thrown. </li>\n</ul>\n<pre>\nlet arr = new Array(3.14);  // RangeError: Invalid array length\n</pre>\n<ul>\n  <li> Otherwise the array will have one element with the argument as its value. </li>\n</ul>\n<pre>\nlet arr = new Array(\"3\");  // [\"3\"]\n</pre>\n<p>Note that even if you set the length of an array, it will be empty. That is, it will have the number of elements you declared, but they won't\ncontain anything, so no callbacks will be applied to the array elements.</p>\n<p>For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid\nthese kinds of weird cases, always use the more readable array literal initialization format.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet myArray = new Array(x1, x2, x3);   // Noncompliant. Results in 3-element array.\nlet emptyArray = new Array();          // Noncompliant. Results in 0-element array.\n\nlet unstableArray = new Array(n);      // Noncompliant. Variable in results.\n\nlet arr = new Array(3); // Noncompliant; empty array of length 3\narr.foreach((x) =&gt; alert(\"Hello \" + x)); // callback is not executed because there's nothing in arr\nlet anotherArr = arr.map(() =&gt; 42); // anotherArr is also empty because callback didn't execute\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlet myArray = [x1, x2, x3];\nlet emptyArray = [];\n\n// if \"n\" is the only array element\nlet unstableArray = [n];\n// or,  if \"n\" is the array length (since ES 2015)\nlet unstableArray = Array.from({length: n});\n\nlet arr = [\"Elena\", \"Mike\", \"Sarah\"];\narr.foreach((x) =&gt; alert(\"Hello \" + x));\nlet anotherArr = arr.map(() =&gt; 42);  // anotherArr now holds 42 in each element\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2432",
    "repo": "javascript",
    "name": "Setters should not return values",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>",
    "mdDesc": "<p>Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from\na setter will be ignored, and explicitly returning a value is an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2310",
    "repo": "javascript",
    "name": "Loop counters should not be assigned to from within the loop body",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in\nthe loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var i = 0; i &lt; names.length; i++) {\n  if (!names[i]) {\n    i = names.length;                                 // Non-Compliant\n  } else {\n    console.log(names[i]);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var name of names) {\n  if (!name) {\n    break;                                 // Compliant\n  } else {\n    console.log(name);\n  }\n}\n</pre>",
    "mdDesc": "<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in\nthe loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var i = 0; i &lt; names.length; i++) {\n  if (!names[i]) {\n    i = names.length;                                 // Non-Compliant\n  } else {\n    console.log(names[i]);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar names = [ \"Jack\", \"Jim\", \"\", \"John\" ];\nfor (var name of names) {\n  if (!name) {\n    break;                                 // Compliant\n  } else {\n    console.log(name);\n  }\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2550",
    "repo": "javascript",
    "name": "\"defaults\" should be a function when objects or arrays are used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When using the Backbone.js framework with model <code>defaults</code> that contain arrays or objects, <code>defaults</code> should be defined as a\nfunction rather than an object. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that\ncontains arrays or objects is going to set the default value of every instance to point to the same shared object or array.</p>\n<p>Use a function instead and a fresh copy of the object or array will be peeled off for each instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n        favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n    }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: function() {\n      return {\n        favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n      };\n    }\n});\n</pre>",
    "mdDesc": "<p>When using the Backbone.js framework with model <code>defaults</code> that contain arrays or objects, <code>defaults</code> should be defined as a\nfunction rather than an object. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that\ncontains arrays or objects is going to set the default value of every instance to point to the same shared object or array.</p>\n<p>Use a function instead and a fresh copy of the object or array will be peeled off for each instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n        favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n    }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n    defaults: function() {\n      return {\n        favoriteColors: [\"blue\",\"purple\",\"raspberry\"]\n      };\n    }\n});\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "backbone"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3760",
    "repo": "javascript",
    "name": "Arithmetic operators should only have numbers as operands",
    "createdAt": "2016-11-24T09:37:35+0100",
    "htmlDesc": "<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,\n&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr = \"80\";\nquarter = str / 4; // Noncompliant\n\nif (str &lt; 10) { // Noncompliant\n   // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = \"80\";\nparsedStr = parseInt(str);\nquarter = parsedStr / 4;\n\nif (parsedStr &lt; 10) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>\n  operator will perform a concatenation in that case. </li>\n  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>\n</ul>",
    "mdDesc": "<p>Expressions with arithmetic (<code>/, *, %, ++, --, -, -=, *=, /=, %=, +=, +</code>), unary (<code>-</code>), or comparison operators (<code>&gt;,\n&lt;, &gt;=, &lt;=</code>) where one, or both, of the operands is a String, Boolean or Date value rely on implicit conversions. Both the\nmaintainability and reliability levels of such a piece of code are questionable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr = \"80\";\nquarter = str / 4; // Noncompliant\n\nif (str &lt; 10) { // Noncompliant\n   // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = \"80\";\nparsedStr = parseInt(str);\nquarter = parsedStr / 4;\n\nif (parsedStr &lt; 10) {\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Expressions using the binary <code>+</code> operator with at least one <code>String</code> operand are ignored because the <code>+</code>\n  operator will perform a concatenation in that case. </li>\n  <li> Comparisons where both operands are strings are ignored because a lexicographical comparison is performed in that case. </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:OneStatementPerLine",
    "repo": "javascript",
    "name": "Statements should be on separate lines",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo(); bar(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo();\nbar();\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant\n\nif (condition) doSomething();                         // Compliant\nif (condition) { doSomething(); }                     // Compliant\n</pre>",
    "mdDesc": "<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfoo(); bar(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfoo();\nbar();\n</pre>\n<h2>Exceptions</h2>\n<p>Anonymous functions containing a single statement are ignored. Control flow statements with a single nested statement are ignored as well.</p>\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p % 2; }); // Noncompliant\n\nif (condition) doSomething();                         // Compliant\nif (condition) { doSomething(); }                     // Compliant\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "style"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1226",
    "repo": "javascript",
    "name": "Function parameters, caught exceptions and foreach variables should not be reassigned",
    "createdAt": "2017-01-18T16:31:59+0100",
    "htmlDesc": "<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able\nto tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some\ndevelopers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could\nconfuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass(name, strings) {\n  name = foo;                    // Noncompliant\n\n  for (var str of strings) {\n    str = \"\";  // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>",
    "mdDesc": "<p>While it is technically correct to assign to parameters from within function bodies, it reduces code readability because developers won't be able\nto tell whether the original parameter or some temporary variable is being accessed without going through the whole function. Moreover, some\ndevelopers might also expect assignments of function parameters to be visible to callers, which is not the case, and this lack of visibility could\nconfuse them. Instead, all parameters, caught exceptions, and foreach parameters should be treated as constants.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass(name, strings) {\n  name = foo;                    // Noncompliant\n\n  for (var str of strings) {\n    str = \"\";  // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2012, 17.8 - A function parameter should not be modified </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3525",
    "repo": "javascript",
    "name": "Class methods should be used instead of \"prototype\" assignments",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to\ntrue <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>\n<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyNonClass(initializerArgs = []) {\n  this._values = [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething = function () {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  constructor(initializerArgs = []) {\n    this._values = [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n</pre>",
    "mdDesc": "<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code>\nassignments for \"class\" functions. Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be converted to\ntrue <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>\n<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyNonClass(initializerArgs = []) {\n  this._values = [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething = function () {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  constructor(initializerArgs = []) {\n    this._values = [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S1105",
    "repo": "javascript",
    "name": "An open curly brace should be located at the end of a line",
    "createdAt": "2017-02-08T00:48:08+0100",
    "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {                                   //Compliant\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Object literals appearing as arguments can start on their own line.</p>\n<pre>\nfunctionWithObject(\n   {                                                 //Compliant\n        g: \"someValue\"\n   }\n);\n</pre>",
    "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n{                                                      //Noncompliant\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {                                   //Compliant\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Object literals appearing as arguments can start on their own line.</p>\n<pre>\nfunctionWithObject(\n   {                                                 //Compliant\n        g: \"someValue\"\n   }\n);\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:TrailingComma",
    "repo": "javascript",
    "name": "Trailing commas should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>",
    "mdDesc": "<p>Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which\nthrows a meaningless error. Therefore trailing commas should be eliminated.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cross-browser"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2762",
    "repo": "javascript",
    "name": "Selections should be stored",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable\nrather than making the selection repeatedly.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 2</p>\n<pre>\n$( \"p\" ).hide();\n$( \"p\" ).show();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( \"p\" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n<h2>Exceptions</h2>\n<p>Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during\nan assignment.</p>\n<pre>\nvar paragraph = $(\"p\");\n\n// ...\n\nparagraph = $(\"p\");\n</pre>",
    "mdDesc": "<p>jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable\nrather than making the selection repeatedly.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 2</p>\n<pre>\n$( \"p\" ).hide();\n$( \"p\" ).show();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( \"p\" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n<h2>Exceptions</h2>\n<p>Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during\nan assignment.</p>\n<pre>\nvar paragraph = $(\"p\");\n\n// ...\n\nparagraph = $(\"p\");\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "performance",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "threshold",
        "htmlDesc": "Number of allowed repetition before triggering an issue",
        "defaultValue": "2",
        "type": "INTEGER"
      }
    ],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "1min",
    "defaultDebtRemFnOffset": "2min",
    "effortToFixDescription": "number of times selection is re-made.",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "1min",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "1min",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "1min",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "gapDescription": "number of times selection is re-made.",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3854",
    "repo": "javascript",
    "name": "\"super()\" should be invoked appropriately",
    "createdAt": "2017-02-08T00:48:08+0100",
    "htmlDesc": "<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke\n<code>super()</code>.</p>\n<p>Furthermore:</p>\n<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>\n<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>\n<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>\n<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>\n<h3>Known Limitations</h3>\n<ul>\n  <li> False negatives: some issues are not raised if the base class is not defined in the same file as the current class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         // Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         // Noncompliant, super() must be invoked before \"this\" or \"super\" is used\n  }\n\n  doSomething() {\n    super();         // Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         // Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  // Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    // Noncompliant, super() can only be invoked once\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n</pre>",
    "mdDesc": "<p>There are situations where <code>super()</code> must be invoked and situations where <code>super()</code> cannot be invoked.</p>\n<p>The basic rule is: a constructor in a non-derived class cannot invoke <code>super()</code>; a constructor in a derived class must invoke\n<code>super()</code>.</p>\n<p>Furthermore:</p>\n<p>- <code>super()</code> must be invoked before the <code>this</code> and <code>super</code> keywords can be used.</p>\n<p>- <code>super()</code> must be invoked with the same number of arguments as the base class' constructor.</p>\n<p>- <code>super()</code> can only be invoked in a constructor - not in any other method.</p>\n<p>- <code>super()</code> cannot be invoked multiple times in the same constructor.</p>\n<h3>Known Limitations</h3>\n<ul>\n  <li> False negatives: some issues are not raised if the base class is not defined in the same file as the current class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Animal {\n  constructor() {\n    super();         // Noncompliant, super() cannot be invoked in a base class\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    this.name = name;\n    super.doSomething();\n    super();         // Noncompliant, super() must be invoked before \"this\" or \"super\" is used\n  }\n\n  doSomething() {\n    super();         // Noncompliant, super() cannot be invoked outside of a constructor\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super();         // Noncompliant, super() must be invoked with one argument\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n  }                  // Noncompliant, super() must be invoked in constructor of derived class\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n    super(name);    // Noncompliant, super() can only be invoked once\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Animal {\n  constructor() {\n  }\n\n  doSomething() {\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super();\n    this.name = name;\n    super.doSomething();\n  }\n\n  doSomething() {\n  }\n}\n\nclass Labrador extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass GermanShepherd extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n\nclass FilaBrasileiro extends Dog {\n  constructor(name) {\n    super(name);\n  }\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3972",
    "repo": "javascript",
    "name": "Conditionals should start on new lines",
    "createdAt": "2017-11-13T09:04:47+0100",
    "htmlDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
    "mdDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>} </code> from a preceding\n<code>else</code> or <code>else if</code>, it is either an error - <code>else</code> is missing - or the invitation to a future error as maintainers\nfail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3973",
    "repo": "javascript",
    "name": "A conditionally executed single line should be denoted by indentation",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
    "mdDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:SwitchWithoutDefault",
    "repo": "javascript",
    "name": "\"switch\" statements should end with \"default\" clauses",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
    "mdDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label </li>\n  <li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2769",
    "repo": "javascript",
    "name": "Selection results should be tested with \"length\"",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Once you've made a selection, you typically want to know whether it actually found anything. Since selectors <em>always</em> return an object (the\nset of selected DOM elements), the best way to see whether your selection found anything is to test the returned object's <code>.length</code>\nproperty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( \"div.foo\" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn't match any elements\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( \"div.foo\" ).length &gt; 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>",
    "mdDesc": "<p>Once you've made a selection, you typically want to know whether it actually found anything. Since selectors <em>always</em> return an object (the\nset of selected DOM elements), the best way to see whether your selection found anything is to test the returned object's <code>.length</code>\nproperty. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( \"div.foo\" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn't match any elements\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( \"div.foo\" ).length &gt; 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3616",
    "repo": "javascript",
    "name": "Comma and logical OR operators should not be used in switch cases",
    "createdAt": "2016-09-01T10:15:29+0200",
    "htmlDesc": "<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.</p>\n<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be\nconsidered at execution time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch a {\n  case 1,2:  // Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");  // this happens when a==1 or a == 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");\n}\n</pre>",
    "mdDesc": "<p>The comma operator (<code>,</code>) evaluates its operands, from left to right, and returns the second one. That's useful in some situations, but\njust wrong in a <code>switch</code> <code>case</code>. You may think you're compactly handling multiple values in the case, but only the last one in\nthe comma-list will ever be handled. The rest will fall through to the default.</p>\n<p>Similarly the logical OR operator (<code>||</code>) will not work in a <code>switch</code> <code>case</code>, only the first argument will be\nconsidered at execution time.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch a {\n  case 1,2:  // Noncompliant; only 2 is ever handled by this case\n    doTheThing(a);\n  case 3 || 4: // Noncompliant; only '3' is handled\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");  // this happens when a==1 or a == 4\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch a {\n  case 1:\n  case 2:\n    doTheThing(a);\n  case 3:\n  case 4:\n    doThatThing(a);\n  case 5:\n    doTheOtherThing(a);\n  default:\n    console.log(\"Neener, neener!\");\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3735",
    "repo": "javascript",
    "name": "\"void\" should not be used",
    "createdAt": "2016-10-15T04:37:31+0200",
    "htmlDesc": "<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5\nenvironments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid (function() {\n   ...\n}());\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n(function() {\n   ...\n}());\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>. </p>\n<pre>\nif (parameter === void 0) {...}\n</pre>",
    "mdDesc": "<p>The <code>void</code> operator evaluates its argument and unconditionally returns <code>undefined</code>. It can be useful in pre-ECMAScript 5\nenvironments, where <code>undefined</code> could be reassigned, but generally, its use makes code harder to understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid (function() {\n   ...\n}());\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n(function() {\n   ...\n}());\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is raised when <code>void 0</code> is used in place of <code>undefined</code>. </p>\n<pre>\nif (parameter === void 0) {...}\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "confusing"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:ElseIfWithoutElse",
    "repo": "javascript",
    "name": "\"if ... else if\" constructs should end with \"else\" clauses",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw \"Unexpected value for x\";\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
    "mdDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw \"Unexpected value for x\";\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause. </li>\n  <li> MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/PQHRAw\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "misra"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:WithStatement",
    "repo": "javascript",
    "name": "\"with\" statements should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with</code>.</p>\n<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously\nunpredictable, and should never be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); // shows: undefined 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); // shows: 3 a\n</pre>",
    "mdDesc": "<p>The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against\n<code>with</code>.</p>\n<p>Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access\nsome property not already set in the object, and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting\nvariables there. Since the effects of <code>with</code> are entirely dependent on the object passed to it, <code>with</code> can be dangerously\nunpredictable, and should never be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + \" \" + x); // shows: undefined 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + \" \" + x); // shows: 3 a\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:NonEmptyCaseWithoutBreak",
    "repo": "javascript",
    "name": "Switch cases should end with an unconditional \"break\" statement",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>",
    "mdDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                               // Ends with comment when fall-through is intentional\n    console.log(\"this case falls through\")\n    // fall through\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used. </li>\n  <li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause </li>\n  <li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement. </li>\n  <li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause </li>\n  <li> MISRA C:2012, 16.1 - All switch statements shall be well-formed </li>\n  <li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case\n  label with a break statement </li>\n</ul>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:BitwiseOperators",
    "repo": "javascript",
    "name": "Bitwise operators should not be used in boolean contexts",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.\n</p>\n<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,\n<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and\n<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.</p>",
    "mdDesc": "<p>The bitwise operators <code>&amp;</code>, <code>|</code> can be mistaken for the boolean operators <code>&amp;&amp;</code> and <code>||</code>.\n</p>\n<p>This rule raises an issue when <code>&amp;</code> or <code>|</code> is used in a boolean context.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a &amp;&amp; b) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>When a file contains other bitwise operations, (<code>^</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&gt;&gt;</code>,\n<code>~</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code> and\n<code>&amp;</code> or <code>|</code> used with a numeric literal as the right operand) all issues in the file are ignored, because it is evidence that\nbitwise operations are truly intended in the file.</p>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:ConditionalOperator",
    "repo": "javascript",
    "name": "The ternary operator should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {\n  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  var b;\n  if (a === 'A') {\n    b = 'is A';\n  }\n  else {\n    b = 'is not A';\n  }\n  // ...\n}\n</pre>",
    "mdDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo(a) {\n  var b = (a === 'A') ? 'is A' : 'is not A'; // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo(a) {\n  var b;\n  if (a === 'A') {\n    b = 'is A';\n  }\n  else {\n    b = 'is not A';\n  }\n  // ...\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "brain-overload"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S888",
    "repo": "javascript",
    "name": "Equality operators should not be used in \"for\" loop termination conditions",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (var i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (var i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>",
    "mdDesc": "<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li> starts below the ending value and is incremented by 1 on each iteration. </li>\n  <li> starts above the ending value and is decremented by 1 on each iteration. </li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (var i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (var i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> MISRA C++:2008, 6-5-2 </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop') </li>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>\n</ul>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cert",
      "cwe",
      "misra",
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3500",
    "repo": "javascript",
    "name": "Attempts should not be made to update \"const\" variables",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst pi = \"yes, please\";\npi = 3.14;  // Noncompliant\n</pre>",
    "mdDesc": "<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015\nenvironment, such an attempt might simply be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst pi = \"yes, please\";\npi = 3.14;  // Noncompliant\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S3863",
    "repo": "javascript",
    "name": "Imports from the same modules should be merged",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>Multiple imports from the same module should be merged together to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport { B1 } from 'b';\nimport { B2 } from 'b'; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1, B2 } from 'b';\n</pre>",
    "mdDesc": "<p>Multiple imports from the same module should be merged together to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport { B1 } from 'b';\nimport { B2 } from 'b'; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport { B1, B2 } from 'b';\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3984",
    "repo": "javascript",
    "name": "Errors should not be created without being thrown",
    "createdAt": "2017-10-11T12:56:59+0200",
    "htmlDesc": "<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0) {\n  new Error(\"x must be nonnegative\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0) {\n  throw new Error(\"x must be nonnegative\");\n}\n</pre>",
    "mdDesc": "<p>Creating a new <code>Error</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0) {\n  new Error(\"x must be nonnegative\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0) {\n  throw new Error(\"x must be nonnegative\");\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S1442",
    "repo": "javascript",
    "name": "\"alert(...)\" should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in\nproduction mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition) {\n  alert(\"Unexpected Condition\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "mdDesc": "<p><code>alert(...)</code> as well as <code>confirm(...)</code> and <code>prompt(...)</code> can be useful for debugging during development, but in\nproduction mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition) {\n  alert(\"Unexpected Condition\");\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> OWASP Top 10 2017 Category A3 - Sensitive Data Exposure </li>\n</ul>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "cwe",
      "owasp-a3",
      "user-experience"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "10min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "VULNERABILITY"
  },
  {
    "key": "javascript:S3981",
    "repo": "javascript",
    "name": "Collection sizes and array length comparisons should make sense",
    "createdAt": "2018-02-15T14:17:53+0100",
    "htmlDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (someSet.size &gt;= 0) {...} // Noncompliant\n\nif (someMap.size &lt; 0) {...} // Noncompliant\n\nconst result = someArray.length &gt;= 0;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (someSet.size &gt; 0) {...}\n\nif (someMap.size == 0) {...}\n\nconst result = someArray.length &gt; 0;\n</pre>",
    "mdDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (someSet.size &gt;= 0) {...} // Noncompliant\n\nif (someMap.size &lt; 0) {...} // Noncompliant\n\nconst result = someArray.length &gt;= 0;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (someSet.size &gt; 0) {...}\n\nif (someMap.size == 0) {...}\n\nconst result = someArray.length &gt; 0;\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "javascript:S2770",
    "repo": "javascript",
    "name": "Deprecated jQuery methods should not be used",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth\ntransition away from the aging, soon-to-be-retired technology.</p>\n<p>This rule raises an issue when any of the following methods is used:</p>\n<ul>\n  <li> <code>.andSelf()</code> </li>\n  <li> <code>.context</code> </li>\n  <li> <code>.die()</code> </li>\n  <li> <code>.error()</code> </li>\n  <li> <code>jQuery.boxModel</code> </li>\n  <li> <code>jQuery.browser</code> </li>\n  <li> <code>jQuery.sub()</code> </li>\n  <li> <code>jQuery.support</code> </li>\n  <li> <code>.live()</code> </li>\n  <li> <code>.load()</code> </li>\n  <li> <code>.selector</code> </li>\n  <li> <code>.size()</code> </li>\n  <li> <code>.toggle()</code> </li>\n  <li> <code>.unload()</code> </li>\n</ul>",
    "mdDesc": "<p>Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth\ntransition away from the aging, soon-to-be-retired technology.</p>\n<p>This rule raises an issue when any of the following methods is used:</p>\n<ul>\n  <li> <code>.andSelf()</code> </li>\n  <li> <code>.context</code> </li>\n  <li> <code>.die()</code> </li>\n  <li> <code>.error()</code> </li>\n  <li> <code>jQuery.boxModel</code> </li>\n  <li> <code>jQuery.browser</code> </li>\n  <li> <code>jQuery.sub()</code> </li>\n  <li> <code>jQuery.support</code> </li>\n  <li> <code>.live()</code> </li>\n  <li> <code>.load()</code> </li>\n  <li> <code>.selector</code> </li>\n  <li> <code>.size()</code> </li>\n  <li> <code>.toggle()</code> </li>\n  <li> <code>.unload()</code> </li>\n</ul>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "obsolete"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "20min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "20min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "20min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "20min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:TrailingWhitespace",
    "repo": "javascript",
    "name": "Lines should not end with trailing whitespaces",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = \"Hello \\\nWorld\";\n</pre>",
    "mdDesc": "<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same\nfile.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the\nopportunity to do so. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = \"Hello \\\nWorld\";\n</pre>",
    "severity": "MINOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "1min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "1min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "1min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "1min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S2898",
    "repo": "javascript",
    "name": "\"[type=...]\" should be used to select elements by type",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>While <code>:&lt;element_type&gt;</code> and <code>[type=\"&lt;element_type&gt;\"]</code> can both be used in jQuery to select elements by their\ntype, <code>[type=\"&lt;element_type&gt;\"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method\nin modern browsers. </p>\n<p>This rule raises an issue when following selectors are used:</p>\n<ul>\n  <li> <code>:checkbox</code> </li>\n  <li> <code>:file</code> </li>\n  <li> <code>:image</code> </li>\n  <li> <code>:password</code> </li>\n  <li> <code>:radio</code> </li>\n  <li> <code>:reset</code> </li>\n  <li> <code>:text</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar input = $( \"form input:radio\" ); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar input = $( \"form input[type=radio]\" ); // Compliant\n</pre>",
    "mdDesc": "<p>While <code>:&lt;element_type&gt;</code> and <code>[type=\"&lt;element_type&gt;\"]</code> can both be used in jQuery to select elements by their\ntype, <code>[type=\"&lt;element_type&gt;\"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method\nin modern browsers. </p>\n<p>This rule raises an issue when following selectors are used:</p>\n<ul>\n  <li> <code>:checkbox</code> </li>\n  <li> <code>:file</code> </li>\n  <li> <code>:image</code> </li>\n  <li> <code>:password</code> </li>\n  <li> <code>:radio</code> </li>\n  <li> <code>:reset</code> </li>\n  <li> <code>:text</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar input = $( \"form input:radio\" ); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvar input = $( \"form input[type=radio]\" ); // Compliant\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "jquery",
      "performance"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3509",
    "repo": "javascript",
    "name": "Default parameters should not cause side effects",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes side effects, the caller\nmay not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting\nthe caller, and for that reason, they should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar count = 0;\n\nfunction go(i = count++) {  // Noncompliant\n  console.log(i);\n}\n\ngo();  // outputs 0\ngo(7); // outputs 7\ngo();  // outputs 1\n</pre>",
    "mdDesc": "<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes side effects, the caller\nmay not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting\nthe caller, and for that reason, they should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar count = 0;\n\nfunction go(i = count++) {  // Noncompliant\n  console.log(i);\n}\n\ngo();  // outputs 0\ngo(7); // outputs 7\ngo();  // outputs 1\n</pre>",
    "severity": "BLOCKER",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "es2015",
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "15min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "15min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "15min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "15min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:FunctionDefinitionInsideLoop",
    "repo": "javascript",
    "name": "Functions should not be defined inside loops",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); // 13 instead of 0\nconsole.log(funs[1]()); // 13 instead of 1\nconsole.log(funs[2]()); // 13 instead of 2\nconsole.log(funs[3]()); // 13 instead of 3\n...\n</pre>",
    "mdDesc": "<p>Defining a function inside of a loop can yield unexpected results. Such a function keeps references to the variables which are defined in outer\nscopes. All function instances created inside the loop therefore see the same values for these variables, which is probably not expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i &lt; 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nconsole.log(funs[0]()); // 13 instead of 0\nconsole.log(funs[1]()); // 13 instead of 1\nconsole.log(funs[2]()); // 13 instead of 2\nconsole.log(funs[3]()); // 13 instead of 3\n...\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "30min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "30min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "30min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "30min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S3504",
    "repo": "javascript",
    "name": "Variables should be declared with \"let\" or \"const\"",
    "createdAt": "2016-05-12T22:28:22+0200",
    "htmlDesc": "<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>\ncreates a read-only (constant) variable.</p>\n<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>\nwill help alleviate many of the variable scope issues which have caused confusion in the past. </p>\n<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s\nin pre-ECMAScript 2015 environments.</p>\n<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = \"blue\";\nvar size = 4;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst color = \"blue\";\nlet size = 4;\n</pre>",
    "mdDesc": "<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code>\ncreates a read-only (constant) variable.</p>\n<p>The distinction between the variable types created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code>\nwill help alleviate many of the variable scope issues which have caused confusion in the past. </p>\n<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some\nrefactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s\nin pre-ECMAScript 2015 environments.</p>\n<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = \"blue\";\nvar size = 4;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nconst color = \"blue\";\nlet size = 4;\n</pre>",
    "severity": "CRITICAL",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice",
      "es2015"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "5min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "5min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "5min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "5min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "javascript:S4030",
    "repo": "javascript",
    "name": "Collection and array contents should be used",
    "createdAt": "2017-11-13T09:04:47+0100",
    "htmlDesc": "<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the\ncollection moot, or an access is missing.</p>\n<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getLength(a, b, c) {\n  const strings = [];  // Noncompliant\n  strings.push(a);\n  strings.push(b);\n  strings.push(c);\n\n  return a.length + b.length + c.length;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getLength(a, b, c) {\n  return a.length + b.length + c.length;\n}\n</pre>",
    "mdDesc": "<p>When a collection is populated but its contents are never used, then it is surely some kind of mistake. Either refactoring has rendered the\ncollection moot, or an access is missing.</p>\n<p>This rule raises an issue when no methods are called on a collection other than those that add or remove values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction getLength(a, b, c) {\n  const strings = [];  // Noncompliant\n  strings.push(a);\n  strings.push(b);\n  strings.push(c);\n\n  return a.length + b.length + c.length;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfunction getLength(a, b, c) {\n  return a.length + b.length + c.length;\n}\n</pre>",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "suspicious",
      "unused"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "CONSTANT_ISSUE",
    "defaultDebtRemFnOffset": "2min",
    "debtOverloaded": false,
    "debtRemFnType": "CONSTANT_ISSUE",
    "debtRemFnOffset": "2min",
    "defaultRemFnType": "CONSTANT_ISSUE",
    "defaultRemFnBaseEffort": "2min",
    "remFnType": "CONSTANT_ISSUE",
    "remFnBaseEffort": "2min",
    "remFnOverloaded": false,
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "common-js:DuplicatedBlocks",
    "repo": "common-js",
    "name": "Source files should not have any duplicated blocks",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
    "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR_OFFSET",
    "defaultDebtRemFnCoeff": "10min",
    "defaultDebtRemFnOffset": "10min",
    "effortToFixDescription": "number of duplicate blocks",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR_OFFSET",
    "debtRemFnCoeff": "10min",
    "debtRemFnOffset": "10min",
    "defaultRemFnType": "LINEAR_OFFSET",
    "defaultRemFnGapMultiplier": "10min",
    "defaultRemFnBaseEffort": "10min",
    "remFnType": "LINEAR_OFFSET",
    "remFnGapMultiplier": "10min",
    "remFnBaseEffort": "10min",
    "remFnOverloaded": false,
    "gapDescription": "number of duplicate blocks",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "common-js:FailedUnitTests",
    "repo": "common-js",
    "name": "Failed unit tests should be fixed",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
    "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "10min",
    "effortToFixDescription": "number of failed tests",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "10min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "10min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "10min",
    "remFnOverloaded": false,
    "gapDescription": "number of failed tests",
    "scope": "MAIN",
    "isExternal": false,
    "type": "BUG"
  },
  {
    "key": "common-js:InsufficientBranchCoverage",
    "repo": "common-js",
    "name": "Branches should have sufficient coverage by tests",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.",
    "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "minimumBranchCoverageRatio",
        "defaultValue": "65",
        "type": "FLOAT"
      }
    ],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "5min",
    "effortToFixDescription": "number of uncovered conditions",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "5min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "5min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "5min",
    "remFnOverloaded": false,
    "gapDescription": "number of uncovered conditions",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "common-js:InsufficientCommentDensity",
    "repo": "common-js",
    "name": "Source files should have a sufficient density of comment lines",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
    "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "convention"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "minimumCommentDensity",
        "defaultValue": "25",
        "type": "FLOAT"
      }
    ],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "2min",
    "effortToFixDescription": "number of lines required to meet minimum density",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "2min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "2min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "2min",
    "remFnOverloaded": false,
    "gapDescription": "number of lines required to meet minimum density",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "common-js:InsufficientLineCoverage",
    "repo": "common-js",
    "name": "Lines should have sufficient coverage by tests",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
    "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "bad-practice"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [
      {
        "key": "minimumLineCoverageRatio",
        "defaultValue": "65",
        "type": "FLOAT"
      }
    ],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "2min",
    "effortToFixDescription": "number of lines under the coverage threshold",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "2min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "2min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "2min",
    "remFnOverloaded": false,
    "gapDescription": "number of lines under the coverage threshold",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  },
  {
    "key": "common-js:SkippedUnitTests",
    "repo": "common-js",
    "name": "Skipped unit tests should be either removed or fixed",
    "createdAt": "2016-05-12T22:28:23+0200",
    "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
    "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
    "severity": "MAJOR",
    "status": "READY",
    "isTemplate": false,
    "tags": [],
    "sysTags": [
      "pitfall"
    ],
    "lang": "js",
    "langName": "JavaScript",
    "params": [],
    "defaultDebtRemFnType": "LINEAR",
    "defaultDebtRemFnCoeff": "10min",
    "effortToFixDescription": "number of skipped tests",
    "debtOverloaded": false,
    "debtRemFnType": "LINEAR",
    "debtRemFnCoeff": "10min",
    "defaultRemFnType": "LINEAR",
    "defaultRemFnGapMultiplier": "10min",
    "remFnType": "LINEAR",
    "remFnGapMultiplier": "10min",
    "remFnOverloaded": false,
    "gapDescription": "number of skipped tests",
    "scope": "MAIN",
    "isExternal": false,
    "type": "CODE_SMELL"
  }
]
xd: 1869.990ms
